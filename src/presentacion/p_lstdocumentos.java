/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion;

import dominio.d_documento;
import interfaces.observador_prop;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import presentacion.paneles.p_control;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.table.TableRowSorter;
import static jdk.nashorn.internal.objects.NativeString.toUpperCase;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import persistencia.p_conexion;

/**
 *
 * @author Gonzalo
 */
public class p_lstdocumentos extends javax.swing.JFrame implements observador_prop {

    DefaultTableModel mdltabdoc = new DefaultTableModel();
    List<d_documento> lista = new ArrayList();
    TableRowSorter trs;
    p_control con = p_control.getInstancia();

    /**
     * Creates new form p_lstpropietarios
     */
    public p_lstdocumentos() {
        initComponents();
        setLocationRelativeTo(null);

        tbldocumentos.setModel(mdltabdoc);

        mdltabdoc.addColumn("FECHA");
        mdltabdoc.addColumn("NOMBRE");
        mdltabdoc.addColumn("DIRECCION");
        mdltabdoc.addColumn("CI");
        mdltabdoc.addColumn("TEXTO");
        mdltabdoc.addColumn("DESCR. MONTO");
        mdltabdoc.addColumn("MONTO");
        mdltabdoc.addColumn("MONEDA");
        mdltabdoc.addColumn("TIPO");
        cargar_documentos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tbldocumentos = tbldocumentos = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };
        imprimir_copia = new javax.swing.JButton();
        imprimir_comun = new javax.swing.JButton();
        email = new javax.swing.JCheckBox();
        impresora = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("LISTA DE DOCUMENTOS");
        getContentPane().setLayout(null);

        tbldocumentos.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        tbldocumentos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbldocumentosMouseClicked(evt);
            }
        });
        tbldocumentos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbldocumentosKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tbldocumentos);
        if (tbldocumentos.getColumnModel().getColumnCount() > 0) {
            tbldocumentos.getColumnModel().getColumn(0).setHeaderValue("Title 1");
            tbldocumentos.getColumnModel().getColumn(1).setHeaderValue("Title 2");
            tbldocumentos.getColumnModel().getColumn(2).setHeaderValue("null");
        }

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 30, 810, 210);

        imprimir_copia.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        imprimir_copia.setText("IMPRIMIR COPIA");
        imprimir_copia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimir_copiaActionPerformed(evt);
            }
        });
        getContentPane().add(imprimir_copia);
        imprimir_copia.setBounds(140, 300, 120, 30);

        imprimir_comun.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        imprimir_comun.setText("IMPRIMIR COMUN");
        imprimir_comun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimir_comunActionPerformed(evt);
            }
        });
        getContentPane().add(imprimir_comun);
        imprimir_comun.setBounds(10, 300, 120, 30);

        email.setText("E-MAIL");
        email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailActionPerformed(evt);
            }
        });
        getContentPane().add(email);
        email.setBounds(140, 260, 90, 23);

        impresora.setText("IMPRESORA");
        getContentPane().add(impresora);
        impresora.setBounds(10, 260, 120, 23);

        setBounds(0, 0, 845, 385);
    }// </editor-fold>//GEN-END:initComponents


    private void tbldocumentosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbldocumentosKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tbldocumentosKeyPressed

    private void tbldocumentosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbldocumentosMouseClicked
        try {
            //if (evt.getClickCount() == 2) {
            selecciontabla();
            //}
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tbldocumentosMouseClicked

    private void imprimir_copiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimir_copiaActionPerformed
        try {
            generarreporte_copia(selecciontabla());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_imprimir_copiaActionPerformed

    private void imprimir_comunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimir_comunActionPerformed
        try {
            generarreporte_comun(selecciontabla());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_imprimir_comunActionPerformed

    private void emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailActionPerformed

    void cleartable() {
        for (int i = 0; i < tbldocumentos.getRowCount(); i++) {
            mdltabdoc.removeRow(i);
            i -= 1;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(p_lstdocumentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(p_lstdocumentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(p_lstdocumentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(p_lstdocumentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new p_lstdocumentos().setVisible(true);
            }
        });
    }

    void cargar_documentos() {
        d_documento doc = new d_documento();
        Vector v;

        try {
            cleartable();
            lista = doc.listar_documentos();
            for (d_documento aux : lista) {
                v = new Vector();
                //v.add(parsefechastring(aux.getFecha()));
                v.add((aux.getFecha()));
                v.add(aux.getNombre());
                v.add(aux.getDireccion());
                v.add(aux.getCi());
                v.add(aux.getTexto());
                v.add(aux.getDescripcion_monto());
                v.add(con.mostrarnumero(aux.getMonto()));
                v.add(aux.getTipo_moneda());
                v.add(aux.getTipo());
                mdltabdoc.addRow(v);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /*
    String parsefechastring(java.util.Date fecha) {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        String fechastr = formato.format(fecha);

        return fechastr;
    }
    */
    Date parsefechadate(Date fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        Date fechaDate = null;
        
        try {
            String nuevafecha = formato.format(fecha);
            fechaDate = formato.parse(nuevafecha);
        } catch (Exception ex) {
            throw new Exception(ex.getMessage());
        }
        return fechaDate;
    }

    d_documento selecciontabla() throws Exception {
        p_control con = p_control.getInstancia();

        int row = tbldocumentos.getSelectedRow(); //guarda el numero de fila que selecciona el usuario

        if (row != -1) {
            d_documento doc = new d_documento();

            return doc.buscar_documento((Timestamp) tbldocumentos.getValueAt(row, 0));

        } else {
            JOptionPane.showMessageDialog(null, toUpperCase("debe seleccionar una fila"), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        return null;
    }

    void generarreporte_comun(d_documento doc) throws Exception {
        //p_control con = p_control.getInstancia();
        if (doc == null) {
            return;
        }

        java.sql.Connection c;
        p_conexion conex = p_conexion.getInstancia();
        c = conex.crearconexion();

        String template = devuelvetipo(doc.getTipo(), doc.getTipo_moneda());
        JasperReport reporte = null;
        reporte = (JasperReport) JRLoader.loadObject(template);

        Map param = new HashMap();

        String importe = con.mostrarnumero(doc.getMonto());
        param.put("fecha", parsefechadate(doc.getFecha()));
        param.put("nombre", doc.getNombre());
        param.put("ci", doc.getCi());
        param.put("direccion", doc.getDireccion());
        param.put("texto", doc.getTexto());
        param.put("movimiento", "");//ACA PUEDE IR COMUN O COPIA
        if (doc.getTipo_moneda().equals("USD")) {
            param.put("pesos", doc.getDescripcion_monto() + "\n" + "U$S " + importe);
        } else {
            param.put("pesos", doc.getDescripcion_monto() + "\n" + "$ " + importe);
        }
        JasperPrint jasperprint = JasperFillManager.fillReport(reporte, param, c);
        JasperViewer visor = new JasperViewer(jasperprint, false);
        visor.setTitle("Recibo Resguardo");
        visor.setVisible(true);
        //this.dispose();
    }

    void generarreporte_copia(d_documento doc) throws Exception {
        if (doc == null) {
            return;
        }

        java.sql.Connection c;
        p_conexion conex = p_conexion.getInstancia();
        c = conex.crearconexion();

        String template = devuelvetipo(doc.getTipo(), doc.getTipo_moneda());
        JasperReport reporte = null;
        reporte = (JasperReport) JRLoader.loadObject(template);

        Map param = new HashMap();

        String importe = con.mostrarnumero(doc.getMonto());
        
        param.put("fecha", parsefechadate(doc.getFecha()));
        param.put("nombre", doc.getNombre());
        param.put("ci", doc.getCi());
        param.put("direccion", doc.getDireccion());
        param.put("texto", doc.getTexto());
        param.put("movimiento", "COPIA DE DOCUMENTO");//ACA PUEDE IR COMUN O COPIA
        if (doc.getTipo_moneda().equals("USD")) {
            param.put("pesos", doc.getDescripcion_monto() + "\n" + "U$S " + importe);
        } else {
            param.put("pesos", doc.getDescripcion_monto() + "\n" + "$ " + importe);
        }
        JasperPrint jasperprint = JasperFillManager.fillReport(reporte, param, c);
        JasperViewer visor = new JasperViewer(jasperprint, false);
        visor.setTitle("Recibo Resguardo");
        visor.setVisible(true);
        //this.dispose();
    }

    String devuelvetipo(String tipo_doc, String moneda) throws Exception {

        if (impresora.isSelected() && email.isSelected()) {
            throw new Exception("debe seleccionar impresora o e-mail para el documento generado");
        }
        if (!impresora.isSelected() && !email.isSelected()) {
            throw new Exception("debe seleccionar impresora o e-mail para el documento generado");
        }
        if (tipo_doc.equals("Resguardo")) {
            if (moneda.equals("USD")) {
                if (email.isSelected()) {
                    return "recibo-resguardo-dolares-logo.jasper";//OK
                } else {
                    return "recibo-resguardo-dolares.jasper";//OK
                }
            } else {
                if (email.isSelected()) {
                    return "recibo-resguardo-logo.jasper";//OK
                } else {
                    return "recibo-resguardo.jasper"; //OK
                }
            }
        }
        if (tipo_doc.equals("Recibo")) {
            if (moneda.equals("USD")) {
                if (email.isSelected()) {
                    return "recibo-recibo-dolares-logo.jasper";//OK
                } else {
                    return "recibo-recibo-dolares.jasper";//OK
                }
            } else {
                if (email.isSelected()) {
                    return "recibo-recibo-logo.jasper";//OK
                } else {
                    return "recibo-recibo.jasper";
                }
            }
        }
        throw new Exception("debe seleccionar resguardo o recibo para el documento generado");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox email;
    private javax.swing.JCheckBox impresora;
    private javax.swing.JButton imprimir_comun;
    private javax.swing.JButton imprimir_copia;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbldocumentos;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actualizar() {
        cargar_documentos();
    }
}
