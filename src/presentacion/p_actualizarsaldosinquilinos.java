/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion;

import dominio.d_gastos_inq;
import dominio.d_grupoirpf;
import dominio.d_inquilino;
import dominio.d_movimiento;
import dominio.d_parametro;
import dominio.d_propietario;
import dominio.d_recibo;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.swing.JOptionPane;
import static jdk.nashorn.internal.objects.NativeString.toUpperCase;
import presentacion.paneles.p_control;

/**
 *
 * @author Gonzalo
 */
public class p_actualizarsaldosinquilinos extends javax.swing.JDialog {

    Integer anio = 0;
    p_control con = p_control.getInstancia();
    //Integer contadorreajuste = 0;
    //Integer mescontadorreajuste = 0;
    String[] fechasreajustes = null;
    String[] fechaspagos = null;
    Float[] importereajustes = null;
    Float[] importepagos = null;
    Date fechaprimerreajuste = null;

    Float importereajuste = 0f;

    List<d_gastos_inq> listagastos = null;
    List<d_gastos_inq> listaconveniosreintegros = null;
    List<d_movimiento> listamovimientos = null;
    List<d_recibo> listadeuda = null;
    List<d_grupoirpf> listagrupoirpf = new ArrayList<d_grupoirpf>();
    Float primerimportealquiler = 0f;

    Boolean aplicoconvenioreintegro = false;
    Integer plazoextendido = 0;
    List<d_inquilino> listainquilinos = new ArrayList<d_inquilino>();
    List<d_propietario> listapropietarios = new ArrayList<d_propietario>();

    /**
     * Creates new form p_inqpaga1
     */
    public p_actualizarsaldosinquilinos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        lbldeuda = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ACTUALIZAR SALDOS");
        setModalityType(null);
        getContentPane().setLayout(null);

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("TOTAL DEUDA INQUILINOS");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(10, 60, 190, 17);

        lbldeuda.setBackground(java.awt.Color.green);
        lbldeuda.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lbldeuda.setOpaque(true);
        getContentPane().add(lbldeuda);
        lbldeuda.setBounds(10, 80, 330, 20);

        jButton6.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton6.setText("ACTUALIZAR");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jButton6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton6KeyPressed(evt);
            }
        });
        getContentPane().add(jButton6);
        jButton6.setBounds(10, 20, 120, 30);

        setBounds(0, 0, 369, 149);
    }// </editor-fold>//GEN-END:initComponents

    void cargarinquilinos() {
        d_inquilino inq = new d_inquilino();

        try {
            listainquilinos = null;
            listainquilinos = inq.listarinquilinosparactualizarsaldos();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    void cargarpropietarios() {
        d_propietario pro = new d_propietario();

        try {
            listapropietarios = null;
            listapropietarios = pro.listarpropietarios();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    void funcbuscar() {
        p_control con = p_control.getInstancia();
        d_propietario prop1 = new d_propietario();
        d_inquilino inq1 = new d_inquilino();
        float saldo = 0f;
        float total = 0f;
        float totalgeneral = 0f;
        Integer prop_id = 0;
        Integer inq_id = 0;
        int contador = 0;

        try {
            lbldeuda.setText(con.mostrarnumero(totalgeneral));

            if (listainquilinos.isEmpty()) {
                return;
            }
            for (d_inquilino aux : listainquilinos) {
                prop_id = aux.getProp_id();
                inq_id = aux.getInq_casa();
                inq1 = inq1.buscarinquilino(prop_id, inq_id);

                prop1 = prop1.buscarpropietario(aux.getProp_id());
                if (prop1 != null) {
                    con.guardarprimermovimiento(prop1);
                }
                total = totaldeuda(inq1);
                totalgeneral = totalgeneral + total;
                String saldoinq = formato(inq1.getInq_saldo());
                String totalstr = formato(total);
                if (saldoinq.equals(totalstr)) {
                    continue;
                }
                contador = contador + 1;
                aux.actualizarsaldo(aux.getProp_id(), aux.getInq_casa(), total);
                //ACTUALIZAR SALDO TOTAL EN TABLA INQUILINO
            }
            for (d_propietario aux_p : listapropietarios) {
                saldo = 0;
                saldo = aux_p.saldototalprop(aux_p.getProp_id());
                aux_p.actualizarsaldoprop(aux_p.getProp_id(), saldo);
                contador = contador + 1;
            }
            if (contador == 1) {
                JOptionPane.showMessageDialog(this, contador + " SALDO FUE ACTUALIZADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            }
            if (contador > 1) {
                JOptionPane.showMessageDialog(this, contador + " SALDOS FUERON ACTUALIZADOS CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            }
            if (contador == 0) {
                JOptionPane.showMessageDialog(this, "TODOS LOS SALDOS EST√ÅN ACTUALIZADOS CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            }
            lbldeuda.setText(con.mostrarnumero(totalgeneral));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    String formato(float total) {
        DecimalFormat formato2 = new DecimalFormat("#.00");
        return formato2.format(total);
    }

    void actualizarcontrato(d_inquilino inq, Boolean reajustaesteanio) throws Exception {
        d_gastos_inq gas = new d_gastos_inq();
        Date fchcontratoaux = null;
        primerimportealquiler = inq.getInq_impalq();

        Date fechafincontrato = fechafincontrato(inq, inq.getInq_fechaic());
        Date fechahoy = new Date();
        int compara = comparafincontratoconinicio(fechafincontrato, fechahoy);
        //ver compara=0

        actualizarprimerimportealquiler(reajustaesteanio, inq);

        Boolean escontratoacomenzar = escontratoacomenzar(inq.getInq_fechaic());

        if (escontratoacomenzar == false) {
            String fechastric = "01/" + devuelvemes(new Date()) + "/" + devuelveanio(new Date());
            fchcontratoaux = parsefechadate(fechastric);
            inq.setInq_fechaic(fchcontratoaux);
        }

        if (reajustaesteanio == false) {
            inq.setArlmrl(ajustarreajuste(inq.getArlmrl()));
        }

        if (inq.getInq_plazo() == 0) {
            inq.setInq_plazo(2);
        }
    }

    Date ajustarreajuste(Date fechareajustevieja) throws Exception {
        String fechastrreajustenuevo = "";
        Date fechareajustenueva = null;
        //10 plazo vigente

        int anioactual = devuelveanio(new Date());
        int anioreajuste = devuelveanio(fechareajustevieja);

        if (anioactual < anioreajuste) {
            return fechareajustevieja;
        }

        fechastrreajustenuevo = "01/" + devuelvemes(fechareajustevieja) + "/" + devuelveanio(new Date());

        fechareajustenueva = parsefechadate(fechastrreajustenuevo);
        //guardaralquilermesactual();
        //fechareajustenueva = inq.sumar1anio(fechareajustenueva);
        return fechareajustenueva;
    }

    Boolean escontratoacomenzar(Date fechainicio) throws Exception {
        Boolean escontratoacomenzar = false;

        int mesinicio = -1;
        int anioinicio = -1;
        int mesactual = -1;
        int anioactual = -1;

        mesinicio = devuelvemes(fechainicio);
        anioinicio = devuelveanio(fechainicio);

        mesactual = devuelvemes(new Date());
        anioactual = devuelveanio(new Date());

        String fechaoriginal = "01/" + mesinicio + "/" + anioinicio;
        String fechaactual = "01/" + mesactual + "/" + anioactual;

        Date fechao = parsefechadate(fechaoriginal);
        Date fechaa = parsefechadate(fechaactual);

        int compara = fechao.compareTo(fechaa);
        if (compara == 1 || compara == 0) {
            return true;
        }
        return escontratoacomenzar;
    }

    void actualizarprimerimportealquiler(Boolean reajustaesteanio, d_inquilino inq) throws Exception {
        d_parametro par = new d_parametro();
        float axreajustediv = 0f;

        if (reajustaesteanio) {
            String fechaactual = "01/" + devuelvemes(new Date()) + "/" + devuelveanio(new Date());
            Date fechaactualdate = parsefechadate(fechaactual);
            int compara = inq.getArlmrl().compareTo(fechaactualdate);
            if (compara == -1 || compara == 0) {
                par = par.buscarparametroporfecha(inq.getArlmrl());
                if (par == null) {
                    throw new Exception("Error de sistema, no existen datos de reajuste para fecha: " + devuelvemes(inq.getArlmrl()) + "/" + devuelveanio(inq.getArlmrl()));
                }
                if (inq.getInq_tipoalq().equals("HABITACION")) {
                    axreajustediv = primerimportealquiler * par.getProcaumento() / 100;
                    axreajustediv = axreajustediv / 3;
                    primerimportealquiler = (primerimportealquiler + axreajustediv);
                } else {
                    axreajustediv = par.getProcaumento();
                    primerimportealquiler = primerimportealquiler + (primerimportealquiler * axreajustediv / 100);
                }
            }
        }
    }

    Date fechafincontrato(d_inquilino inq, Date fechainiciocontrato) throws Exception {
        int aniomasplazo = devuelveanio(fechainiciocontrato);

        aniomasplazo = aniomasplazo + inq.getInq_plazo();
        String fechafincontratostr = devuelvedia(fechainiciocontrato) + "/"
                + devuelvemes(fechainiciocontrato) + "/" + aniomasplazo;

        Date fecha = parsefechadate(fechafincontratostr);
        return fecha;
    }

    Integer comparafincontratoconinicio(Date fechafin, Date fechahoy) {
        //10 plazo vigente (1) - 20 plazo vencido (-1)
        Integer resultado = -1;

        int mesfin = devuelvemes(fechafin);
        int aniofin = devuelveanio(fechafin);
        int meshoy = devuelvemes(fechahoy);
        int aniohoy = devuelveanio(fechahoy);

        if (aniofin >= aniohoy) {
            resultado = 1;
            if (mesfin >= meshoy) {
                resultado = 1;
            }
        }
        return resultado;
    }

    Boolean reajustaesteanio(d_inquilino inq) throws Exception {
        int anioactual = devuelveanio(new Date());
        int anioreajuste = devuelveanio(inq.getArlmrl());

        return anioreajuste == anioactual;
    }

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        cargarinquilinos();
        cargarpropietarios();
        funcbuscar();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton6KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton6KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6KeyPressed

    Integer devuelvemqp(String fecha) throws Exception {
        Integer mqp = 0;
        Date fechad;

        fechad = parsefechadate(fecha);

        mqp = devuelvemes(fechad);

        return mqp;
    }

    Integer devuelveaqp(String fecha) throws Exception {
        Integer aqp = 0;
        Date fechad;

        fechad = parsefechadate(fecha);

        aqp = devuelveanio(fechad);

        return aqp;
    }

    String parsefechastring(java.util.Date fecha) {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        String fechastr = formato.format(fecha);

        return fechastr;
    }

    Float totaldeudalocal(d_inquilino inq) throws Exception {
        Float importetotal = 0f;

        fechasreajustes = new String[4];
        importereajustes = new Float[4];
        importereajuste = 0f;
        importetotal = 0f;
        Boolean sesumaimporte = false;

        //Integer prop_id = Integer.parseInt(txtprop_id.getText());
        //Integer inq_id = Integer.parseInt(txtinq_id.getText());
        //inq1 = inq1.buscarinquilino(prop_id, inq_id);
        //inq = inq1;
        //if (inq.getInq_plazo() != 0 && cmbplazo.getSelectedItem().equals("PLAZO VIGENTE")) {
        obtenerlistadogastospendientesinq(inq);
        listamovimientos(inq);

        //reajustediv = par.getProcaumento();
        lbldeuda.setText("");

        int mesactual = devuelvemes(new Date());
        int anioactual = devuelveanio(new Date());

        if (listagastos != null) {
            for (d_gastos_inq aux : listagastos) {
                if (aux.getEstado().equals(0)) {
                    String fechaxstr = "01/" + aux.getMqp() + "/" + aux.getAqp();
                    sesumaimporte = sesumaimporte(fechaxstr);
                    if (sesumaimporte) {
                        if (aux.getMqp() != mesactual || aux.getAqp() != anioactual) {
                            importetotal = importetotal + (aux.getImporte());
                        }
                    } else {
                        if (aux.getEstado() == 0) {
                            if (aux.getMqp() != mesactual || aux.getAqp() != anioactual) {
                                importetotal = importetotal + (aux.getImporte());
                            }
                        }
                    }
                } else {
                    if (aux.getEstado() == 0) {
                        //String fechaxstrX = "01/" + aux.getMqp() + "/" + aux.getAqp();
                        importetotal = importetotal + (aux.getImporte());
                    }
                }
            }
        }

        return importetotal;

    }

    float totaldeuda(d_inquilino inq) throws Exception {
        Float importetotal = 0f;
        importetotal = 0f;

        Boolean sesumaimporte = false;

        obtenerlistadogastospendientesinq(inq);
        listamovimientos(inq);

        lbldeuda.setText("");

        int mesactual = devuelvemes(new Date());
        int anioactual = devuelveanio(new Date());

        if (listagastos != null) {
            for (d_gastos_inq aux : listagastos) {
                if (aux.getEstado().equals(0)) {
                    String fechaxstr = "01/" + aux.getMqp() + "/" + aux.getAqp();
                    sesumaimporte = sesumaimporte(fechaxstr);
                    if (sesumaimporte) {
                        if (aux.getMqp() != mesactual || aux.getAqp() != anioactual) {
                            importetotal = importetotal + (aux.getImporte());
                        }
                    } else {
                        if (aux.getEstado() == 0) {
                            if (aux.getMqp() != mesactual || aux.getAqp() != anioactual) {
                                importetotal = importetotal + (aux.getImporte());
                            }
                        }
                    }
                } else {
                    if (aux.getEstado() == 0) {
                        importetotal = importetotal + (aux.getImporte());
                    }
                }
            }
        }

        return importetotal;
    }

    Boolean existesaldoalquiler(d_movimiento mov) {
        if (listagastos == null) {
            return false;
        }
        for (d_gastos_inq aux : listagastos) {
            if (mov.getMqp().equals(aux.getMqp())) {
                if (mov.getAqp().equals(aux.getAqp())) {
                    if (aux.getDetalle().equals("SALDO ALQUILER")) {
                        if (aux.getEstado().equals(0)) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    int devuelveposicionfechaspagos(String fechaparametro) throws Exception {
        for (int i = 0; i < fechaspagos.length; i++) {
            String fechalistado = fechaspagos[i];
            if (fechalistado.equals(fechaparametro)) {
                return i;
            }
        }
        return -1;
    }

    Boolean sumarimptotal(Date fecha) {
        int mes = devuelvemes(fecha);
        int anio = devuelveanio(fecha);
        Boolean suma = true;

        for (d_gastos_inq aux : listagastos) {
            int mes1 = aux.getMqp();
            int anio1 = aux.getAqp();
            if (aux.getEstado() == 0) {
                if (mes == mes1 && anio == anio1) {
                    suma = false;
                    break;
                }
            }
        }
        return suma;
    }

    List<d_movimiento> listamovimientos(d_inquilino inq) throws Exception {
        d_movimiento mov = new d_movimiento();
        listamovimientos = mov.listarmovimientosdeinq(inq.getProp_id(), inq.getInq_casa());
        return listamovimientos;
    }

    d_movimiento buscarmovenlistasoloalquiler(d_movimiento mov) {
        if (listamovimientos != null) {
            for (d_movimiento aux : listamovimientos) {
                if (aux.getAqp().equals(mov.getAqp())
                        && aux.getMqp().equals(mov.getMqp())
                        && (aux.getDetalle().equals("ALQUILER") || aux.getDetalle().equals("ALQUILER MES"))) {
                    return aux;
                }
            }
        }
        mov = null;
        return mov;
    }

    d_movimiento buscaralquilerpagadoconsaldo(d_movimiento mov) {
        if (listamovimientos != null) {
            for (d_movimiento aux : listamovimientos) {
                if (aux.getAqp().equals(mov.getAqp()) && aux.getMqp().equals(mov.getMqp()) && aux.getDetalle().equals("SALDO ALQUILER")) {
                    //float a = (aux.getEntrada());
                    //aux.setEntrada(a);
                    return aux;
                }
            }
        }
        mov = null;
        return mov;
    }

    Float importealquilerpagadoacuenta(d_movimiento mov) {
        float a = 0f;
        if (listamovimientos != null) {
            for (d_movimiento aux : listamovimientos) {
                if (aux.getAqp().equals(mov.getAqp())
                        && aux.getMqp().equals(mov.getMqp())
                        && aux.getDetalle().equals("A CUENTA ALQUILER")) {
                    a = a + (aux.getEntrada());
                    //aux.setEntrada(a);
                }
            }
        }
        return a;
    }

    d_movimiento buscarcuotaacuenta(d_movimiento mov) {
        d_movimiento aux1 = null;
        Float importe = 0f;

        for (d_movimiento aux : listamovimientos) {
            if (aux.getAqp().equals(mov.getAqp())
                    && aux.getMqp().equals(mov.getMqp())
                    && aux.getDetalle().equals("A CUENTA ALQUILER")) {
                //sumarimporte
                aux1 = aux;
                importe = aux1.getEntrada();
            }
        }
        if (aux1 != null) {
            aux1.setEntrada(importe);
            return aux1;
        }
        mov = null;
        return mov;
    }

    d_gastos_inq buscargasenlistagastos(d_gastos_inq gas) {
        d_gastos_inq aux1 = null;

        for (d_gastos_inq aux : listagastos) {
            if (aux.getAqp().equals(gas.getAqp()) && aux.getMqp().equals(gas.getMqp()) && aux.getDetalle().equals(gas.getDetalle())) {
                aux1 = new d_gastos_inq();
                aux1 = aux;
                break;
            }
        }

        return aux1;
    }

    String generarfechaconsultapago(Date fecha) throws Exception {
        String fechalistadosrt;

        int mesfechalistado = devuelvemes(fecha);
        int aniofechalistado = devuelveanio(fecha);

        fechalistadosrt = mesfechalistado + "/" + aniofechalistado;

        return fechalistadosrt;
    }

    void obtenerlistadogastospendientesinq(d_inquilino inq) throws Exception {
        d_gastos_inq gas = new d_gastos_inq();

        listagastos = gas.listargastosporinq(inq.getProp_id(), inq.getInq_casa());
    }

    List<d_gastos_inq> existegastoapagar(String fecha) throws Exception {
        List<d_gastos_inq> lista = new ArrayList<d_gastos_inq>();
        d_gastos_inq gas = null;
        Date fechalistado = null;
        Date fechagasto = null;
        int compara = 0;

        if (listagastos == null) {
            return null;
        }

        fechalistado = parsefechadate(fecha);

        int mesfechalistado = devuelvemes(fechalistado);
        int aniofechalistado = devuelveanio(fechalistado);

        String fechalistadosrt = "01/" + mesfechalistado + "/" + aniofechalistado;
        fechalistado = parsefechadate(fechalistadosrt);

        for (d_gastos_inq aux : listagastos) {
            String fechaxstr = "01/" + aux.getMqp() + "/" + aux.getAqp();
            fechagasto = parsefechadate(fechaxstr);
            compara = fechagasto.compareTo(fechalistado);
            if (compara == 0) {
                //lista = new ArrayList<d_gastos_inq>();
                gas = new d_gastos_inq();
                gas.setProp_id(aux.getProp_id());
                gas.setInq_casa(aux.getInq_casa());
                gas.setImporte(aux.getImporte());
                gas.setDetalle(aux.getDetalle());
                gas.setAqp(aux.getAqp());
                gas.setMqp(aux.getMqp());
                gas.setEstado(aux.getEstado());
                lista.add(gas);

                //
            }

        }

        if (lista.size() <= 0) {
            lista = null;
        }

        return lista;
    }

    Boolean sesumaimporte(String fecha) throws Exception {
        Boolean sesumaimporte = false;
        Date fechalistado = null;
        Date fechaactual = null;

        //BUSCAR SI EN ESA FECHA NO TIENE UNA ENTREGA PAGA, NO SUMAR EL TOTAL DEL MES A LA DEUDA TOTAL
        fechalistado = parsefechadate(fecha);
        fechaactual = fechaactual();

        int mesfechalistado = devuelvemes(fechalistado);
        int aniofechalistado = devuelveanio(fechalistado);

        int mesfechaactual = devuelvemes(fechaactual);
        int aniofechaactual = devuelveanio(fechaactual);

        String fechalistadosrt = "01/" + mesfechalistado + "/" + aniofechalistado;
        String aniofechaactualsrt = "01/" + mesfechaactual + "/" + aniofechaactual;

        fechalistado = parsefechadate(fechalistadosrt);
        fechaactual = parsefechadate(aniofechaactualsrt);

        int compara = fechalistado.compareTo(fechaactual);

        if (compara == -1) {
            sesumaimporte = true;
        }

        return sesumaimporte;
    }

    Float agregarimportereajuste(Float importeactual, String fecha) throws Exception {
        Float importe = 0f;
        Float importeconvenioreintegro = 0f;
        Date fechaparametro = null;
        Boolean reajusta = false;
        int i = 0;

        fechaparametro = parsefechadate(fecha);
        importe = importeactual;

        //PRIMERO SABER SI ESA FECHA REAJUSTA
        for (i = 0; i < fechasreajustes.length; i++) {
            if (fechasreajustes[i] != null) {
                Date fechareajustelistado = parsefechadate(fechasreajustes[i]);
                int compara = fechaparametro.compareTo(fechareajustelistado);
                if (compara == 0) {
                    importe = importereajustes[i];
                    reajusta = true;
                }
                if (compara == 1) {
                    break;
                }
            }
        }

        if (reajusta == false) {
            if (i > 0) {

                importe = importereajustes[i - 1];
            }
        }

        /*
        for (i = 0; i < fechasreajustes.length; i++) {
            if (fechasreajustes[i] != null) {
                Date fechareajustelistado = parsefechadate(fechasreajustes[i]);
                int compara = fechaparametro.compareTo(fechareajustelistado);
                if (compara == 0) {
                    importe = importereajustes[i];
                    break;
                }
                if (compara == 1) {
                    if (i > 0) {
                        importe = importereajustes[i];
                        break;
                    }
                }
            }
        }
         */
        //CONVENIO - REINTEGRO
        /*
        d_gastos_inq gas = new d_gastos_inq();
        gas.setProp_id(inq.getProp_id());
        gas.setInq_casa(inq.getInq_casa());
        gas.setMqp(devuelvemes(fecha1));
        gas.setAqp(devuelveanio(fecha1));
        gas = devuelveconveniosreintegros(gas);
        if (gas != null) {
            importeconvenioreintegro = gas.getImporte();
            if (gas.getDetalle().equals("REINTEGRO")) {
                if (importeconvenioreintegro > importe) {
                    throw new Exception("debe eliminar el " + gas.getDetalle() + " de fecha " + gas.getMqp() + "/" + gas.getAqp() + " ya que es mayor al importe de alquiler");
                }
                importeconvenioreintegro = importeconvenioreintegro * -1;
                importe = importe + importeconvenioreintegro;
            }
            if (gas.getDetalle().equals("CONVENIO")) {
                importe = importe + importeconvenioreintegro;
            }
        }
         */
        return importe;
    }

    String[] devuelvemesesreajustelocal(d_inquilino inq) throws Exception {
        fechasreajustes = null;

        fechasreajustes = new String[fechaspagos.length / inq.getInq_plazo()];
        Date fechareajusteinquilino = null;

        fechareajusteinquilino = (inq.getArlmrl());

        int mesreajusteinq = devuelvemes(fechareajusteinquilino);

        int anioreajusteinq = devuelveanio(fechareajusteinquilino);

        for (int i = 0; i < fechasreajustes.length; i++) {
            fechasreajustes[i] = "01/" + mesreajusteinq + "/" + anioreajusteinq;
            anioreajusteinq = anioreajusteinq + 1;
        }

        return fechasreajustes;
    }

    String[] devuelvemesesreajustehabitacion(d_inquilino inq) throws Exception {
        fechasreajustes = null;
        fechasreajustes = new String[4 * inq.getInq_plazo()];
        Date fechareajusteinquilino = null;

        fechareajusteinquilino = (inq.getArlmrl());

        int mesreajusteinq = devuelvemes(fechareajusteinquilino);

        int anioreajusteinq = devuelveanio(fechareajusteinquilino);

        for (int i = 0; i < fechasreajustes.length; i++) {
            fechasreajustes[i] = "01/" + mesreajusteinq + "/" + anioreajusteinq;
            Date fecha = parsefechadate(fechasreajustes[i]);
            fechareajusteinquilino = generarnuevafechareajustehabitacion(fecha);
            mesreajusteinq = devuelvemes(fechareajusteinquilino);
            anioreajusteinq = devuelveanio(fechareajusteinquilino);
        }

        return fechasreajustes;
    }

    Date generarnuevafechareajustehabitacion(Date fecha) throws Exception {
        d_inquilino in = new d_inquilino();

        Date fechagenerada = (fecha);
        fechagenerada = in.sumar4meses(fechagenerada);

        return fechagenerada;
    }

    String[] devuelvefechaspagosgeneral(d_inquilino inq) throws Exception {
        Date primerimporte = null;

        fechaspagos = null;

        int mesesimportes = inq.getInq_plazo() * 12;
        fechaspagos = new String[mesesimportes];

        primerimporte = inq.getInq_fechaic();
        int mesimporte = devuelvemes(primerimporte);
        int anioimporte = devuelveanio(primerimporte);

        for (int i = 0; i < mesesimportes; i++) {
            if (mesimporte > 12) {
                mesimporte = mesimporte - 12;
                anioimporte = anioimporte + 1;
                fechaspagos[i] = "01/" + mesimporte + "/" + anioimporte;
                mesimporte = mesimporte + 1;
            } else {
                fechaspagos[i] = "01/" + mesimporte + "/" + anioimporte;
                mesimporte = mesimporte + 1;
            }
        }
        return fechaspagos;
    }

    d_movimiento cuotapaga(d_inquilino inq, d_movimiento mov) throws Exception {
        d_movimiento mov1 = new d_movimiento();
        d_gastos_inq gas = new d_gastos_inq();

        //mov1 = mov1.buscarcuotapaga(mov);
        mov1 = buscarmovenlistasoloalquiler(mov);
        //buscar en la lista de mov generada
        if (mov1 == null) {
            gas = new d_gastos_inq();
            gas.setProp_id(inq.getProp_id());
            gas.setInq_casa(inq.getInq_casa());
            gas.setDetalle("SALDO ALQUILER");
            gas.setAqp(mov.getAqp());
            gas.setMqp(mov.getMqp());
            gas = buscargasenlistagastos(gas);

            //buscar en la lista de gastos 
            if (gas != null) {
                if (gas.getEstado().equals(1)) {
                    //buscaralquilerpagadoconsaldo
                    //mov1 = new d_movimiento();
                    mov1 = buscaralquilerpagadoconsaldo(mov);
                    //mov1.setEntrada(gas.getImporte() + importealquilerpagadoacuenta(mov));
                    return mov1;
                    //esta pago el mes, ver la forma que devuelva el movimiento correspondiente
                    //esta devolviendo vacio, porque lo pago a traves de un saldo y no como alquiler comun
                } else {
                    return null;
                }
            }
        }
        return mov1;
    }

    Integer chequeafechasiguales(Integer mes1, Integer anio1, Integer mes2, Integer anio2, d_movimiento mov) throws Exception {
        d_movimiento mov1 = new d_movimiento();
        String f1 = "";
        String f2 = "";
        Date fecha1;
        Date fecha2;
        f1 = "01/" + mes1 + "/" + anio1;
        f2 = "01/" + mes2 + "/" + anio2;
        fecha1 = parsefechadate(f1);
        fecha2 = parsefechadate(f2);

        int i = fecha1.compareTo(fecha2);

        if (i == -1) {
            d_inquilino d = new d_inquilino();
            fecha2 = d.restar1mes(fecha2);
            i = fecha1.compareTo(fecha2);
            if (i == 0) {
                return i;
            }
        }

        return i;
    }

    Integer ultimacuotapaga(d_movimiento mov) throws Exception {
        Integer idmov = -1;
        d_movimiento mov1 = new d_movimiento();
        //d_inquilino inq1=new d_inquilino();

        idmov = mov1.buscarultimacuotapagaalq(mov);

        return idmov;
    }

    Float[] devuelvelistadototalimporteslocal(d_inquilino inq) throws Exception {
        importereajustes = null;
        importereajustes = new Float[fechaspagos.length];
        Date fechareajuste = null;
        float axreajustediv = 0f;
        int i = 0;
        Float importe = 0.0F;
        d_parametro par = new d_parametro();

        importe = primerimportealquiler;
        fechareajuste = inq.getArlmrl();

        par = par.buscarparametroporfecha(fechareajuste);
        if (par == null) {
            throw new Exception("Error de sistema, no existen datos de reajuste para fecha: " + devuelvemes(fechareajuste) + "/" + devuelveanio(fechareajuste));
        }

        axreajustediv = par.getProcaumento();

        Date fechareajustealanio = sumaraniosunafecha(fechareajuste, 1);

        for (String fechapagolista : fechaspagos) {
            if (estafechareajusta(fechapagolista)) {
                Date fechapagodate = parsefechadate(fechapagolista);
                int compara = fechapagodate.compareTo(fechareajustealanio);
                if (compara == 0) {
                    par = par.buscarparametroporfecha(fechapagodate);
                    if (par == null) {
                        throw new Exception("Error de sistema, no existen datos de reajuste para fecha: " + devuelvemes(fechapagodate) + "/" + devuelveanio(fechapagodate));
                    }
                    axreajustediv = par.getProcaumento();
                    fechareajustealanio = sumaraniosunafecha(fechareajustealanio, 1);
                }
                importe = importe + (importe * axreajustediv / 100);
                if (i == 0) {
                    importe = primerimportealquiler;
                }
                importereajustes[i] = importe;
                i = i + 1;
            } else {
                importereajustes[i] = importe;
                i = i + 1;
            }
        }
        return importereajustes;
    }

    Date sumaraniosunafecha(Date fecha, int cantidad) {
        Date nuevafecha = null;
        Calendar cal = Calendar.getInstance();
        cal.setTime(fecha);
        cal.add(Calendar.YEAR, cantidad);
        nuevafecha = cal.getTime();
        return nuevafecha;
    }

    Float[] devuelvelistadototalimporteshab(d_inquilino inq) throws Exception {
        importereajustes = null;
        importereajustes = new Float[fechaspagos.length];
        Date fechareajuste = null;
        float sumarimportereajuste = 0f;
        int i = 0;
        Float importe = 0.0F;
        d_parametro par = new d_parametro();

        importe = primerimportealquiler;
        fechareajuste = inq.getArlmrl();

        par = par.buscarparametroporfecha(fechareajuste);
        if (par == null) {
            throw new Exception("Error de sistema, no existen datos de reajuste para fecha: " + devuelvemes(fechareajuste) + "/" + devuelveanio(fechareajuste));
        }
        sumarimportereajuste = (inq.getInq_impalq() * par.getProcaumento()) / 100;
        sumarimportereajuste = sumarimportereajuste / 3;

        Date fechareajustealanio = sumaraniosunafecha(fechareajuste, 1);

        for (String fechapagolista : fechaspagos) {
            Date fechapagodate = parsefechadate(fechapagolista);
            if (estafechareajusta(fechapagolista)) {
                int compara = fechapagodate.compareTo(fechareajustealanio);
                if (compara == 0) {
                    par = par.buscarparametroporfecha(fechapagodate);
                    if (par == null) {
                        throw new Exception("Error de sistema, no existen datos de reajuste para fecha: " + devuelvemes(fechapagodate) + "/" + devuelveanio(fechapagodate));
                    }
                    //axreajustediv = importe + (importe * axreajustediv / 100);
                    sumarimportereajuste = importe * par.getProcaumento() / 100;
                    sumarimportereajuste = sumarimportereajuste / 3;
                    //axreajustediv = axreajustediv * 100;
                    fechareajustealanio = sumaraniosunafecha(fechareajustealanio, 1);
                }
                importe = importe + (sumarimportereajuste);
                if (i == 0) {
                    importe = primerimportealquiler;
                }
                importereajustes[i] = importe;
                i = i + 1;
            } else {
                importereajustes[i] = importe;
                i = i + 1;
            }
        }
        return importereajustes;
    }

    Boolean estafechareajusta(String fechaparametro) throws Exception {
        for (String fechareajustelista : fechasreajustes) {
            if (fechaparametro.equals(fechareajustelista)) {
                return true;
            }
        }
        return false;
    }

    Integer devuelvedia(Date fecha) {
        String formato = "dd";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(fecha));
    }

    Integer devuelvemes(Date fecha) {
        String formato = "MM";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(fecha));
    }

    Integer devuelveanio(Date fecha) {
        String formato = "yyyy";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(fecha));
    }

    Date parsefechadate(String fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        Date fechaDate = null;

        try {
            fechaDate = formato.parse(fecha);
        } catch (ParseException ex) {
            throw new Exception("revise formato de a√±o");
        }
        return fechaDate;
    }

    Date fechaactual() throws Exception {
        Date fechadate = null;
        SimpleDateFormat formateador = new SimpleDateFormat("dd/MM/yyyy", new Locale("es_ES"));
        String fechastr = (formateador.format(new Date()));

        return fechadate = parsefechadate(fechastr);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(p_actualizarsaldosinquilinos.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(p_actualizarsaldosinquilinos.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(p_actualizarsaldosinquilinos.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(p_actualizarsaldosinquilinos.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                p_actualizarsaldosinquilinos dialog = new p_actualizarsaldosinquilinos(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel lbldeuda;
    // End of variables declaration//GEN-END:variables

}
