/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion;

import dominio.d_cfe;
import dominio.d_clave;
import dominio.d_configuracion;
import dominio.d_gastos_inq;
import dominio.d_generarcfe;
import dominio.d_grupoirpf;
import dominio.d_inquilino;
import dominio.d_movimiento;
import dominio.d_parametro;
import dominio.d_parametroscfe;
import dominio.d_propietario;
import dominio.d_xml;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import presentacion.paneles.p_control;
import interfaces.observador_mov;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.xml.bind.JAXBElement;
import javax.xml.namespace.QName;
import static jdk.nashorn.internal.objects.NativeString.toUpperCase;
import org.datacontract.schemas._2004._07.sicfecontract.SICFERespuestaBuffer;
import org.datacontract.schemas._2004._07.sicfecontract.SICFERespuestaEnvioCFE;
import org.datacontract.schemas._2004._07.sicfecontract.SICFERespuestaObtenerCFE;

/**
 *
 * @author Gonzalo
 */
public class p_fichamantenimiento extends javax.swing.JDialog implements observador_mov {

    p_control con = p_control.getInstancia();
    public d_movimiento mov = new d_movimiento();
    Integer idobtenido = -1;

    /**
     * Creates new form p_mantenimiento_mov
     */
    public p_fichamantenimiento(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        cargarmovimientopredefinido();
        cargarmovimiento();

    }

    void cargarmovimientopredefinido() {
        //p_control con = p_control.getInstancia();

        this.mov = con.mov;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtid = new javax.swing.JTextField();
        txtprop_id = new javax.swing.JTextField();
        txtinq_casa = new javax.swing.JTextField();
        txtmqp = new javax.swing.JTextField();
        txtaqp = new javax.swing.JTextField();
        txtdetalle = new javax.swing.JTextField();
        txtentrada = new javax.swing.JTextField();
        txtsalida = new javax.swing.JTextField();
        txtcomision = new javax.swing.JTextField();
        txtiva = new javax.swing.JTextField();
        txtirpf = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        txtclave = new javax.swing.JPasswordField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jdcfecha = new com.toedter.calendar.JDateChooser();
        jLabel15 = new javax.swing.JLabel();
        txtcfe = new javax.swing.JTextField();
        cmbtipo = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        lbltipo = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txttipo = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("INFORMACION DE MOVIMIENTO");
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("ID");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 20, 14, 17);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("ID PROP");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 70, 60, 17);

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("ID INQ");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(200, 70, 43, 17);

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("MQP");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(10, 120, 33, 17);

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("AQP");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(200, 120, 29, 17);

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("DETALLE");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(10, 170, 70, 17);

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setText("ENTRADA");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(200, 170, 90, 17);

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setText("SALIDA");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(200, 220, 60, 17);

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel10.setText("COMISION");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(10, 270, 100, 17);

        jLabel11.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel11.setText("IVA");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(200, 270, 22, 17);

        jLabel12.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel12.setText("TIPO");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(10, 320, 32, 17);

        jLabel13.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel13.setText("TIPO DE PAGO");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(10, 420, 100, 17);

        jLabel14.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel14.setText("IRPF");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(200, 320, 32, 17);

        txtid.setEditable(false);
        txtid.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        txtid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtidActionPerformed(evt);
            }
        });
        getContentPane().add(txtid);
        txtid.setBounds(10, 40, 138, 30);

        txtprop_id.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txtprop_id.setMaximumSize(new java.awt.Dimension(100, 100));
        txtprop_id.setMinimumSize(new java.awt.Dimension(100, 100));
        txtprop_id.setPreferredSize(new java.awt.Dimension(10, 20));
        getContentPane().add(txtprop_id);
        txtprop_id.setBounds(10, 90, 138, 30);

        txtinq_casa.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txtinq_casa.setMaximumSize(new java.awt.Dimension(100, 100));
        txtinq_casa.setMinimumSize(new java.awt.Dimension(100, 100));
        txtinq_casa.setPreferredSize(new java.awt.Dimension(10, 20));
        getContentPane().add(txtinq_casa);
        txtinq_casa.setBounds(200, 90, 138, 30);

        txtmqp.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txtmqp.setMaximumSize(new java.awt.Dimension(100, 100));
        txtmqp.setMinimumSize(new java.awt.Dimension(100, 100));
        txtmqp.setPreferredSize(new java.awt.Dimension(10, 20));
        getContentPane().add(txtmqp);
        txtmqp.setBounds(10, 140, 138, 30);

        txtaqp.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(txtaqp);
        txtaqp.setBounds(200, 140, 138, 30);

        txtdetalle.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(txtdetalle);
        txtdetalle.setBounds(10, 190, 138, 80);

        txtentrada.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(txtentrada);
        txtentrada.setBounds(200, 190, 138, 30);

        txtsalida.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(txtsalida);
        txtsalida.setBounds(200, 240, 138, 30);

        txtcomision.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(txtcomision);
        txtcomision.setBounds(10, 290, 138, 30);

        txtiva.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(txtiva);
        txtiva.setBounds(200, 290, 138, 30);

        txtirpf.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(txtirpf);
        txtirpf.setBounds(200, 340, 138, 30);

        jButton1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton1.setText("GUARDAR");
        jButton1.setMaximumSize(new java.awt.Dimension(103, 23));
        jButton1.setMinimumSize(new java.awt.Dimension(103, 23));
        jButton1.setPreferredSize(new java.awt.Dimension(103, 23));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(380, 190, 120, 30);

        jButton2.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton2.setText("BORRAR");
        jButton2.setMaximumSize(new java.awt.Dimension(103, 23));
        jButton2.setMinimumSize(new java.awt.Dimension(103, 23));
        jButton2.setPreferredSize(new java.awt.Dimension(103, 23));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(380, 140, 120, 30);

        jLabel16.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel16.setText("CLAVE");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(10, 470, 60, 17);

        txtclave.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(txtclave);
        txtclave.setBounds(10, 490, 138, 30);

        jButton3.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton3.setText("GENERAR CFE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(380, 90, 120, 30);

        jButton4.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton4.setText("OBTENER PDF");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(380, 40, 120, 30);

        jdcfecha.setDateFormatString("dd/MM/yyyy");
        jdcfecha.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(jdcfecha);
        jdcfecha.setBounds(200, 390, 138, 30);

        jLabel15.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel15.setText("CFE");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(200, 20, 28, 17);

        txtcfe.setEditable(false);
        txtcfe.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        getContentPane().add(txtcfe);
        txtcfe.setBounds(200, 40, 138, 30);

        cmbtipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "CAJA", "BANCO" }));
        cmbtipo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbtipoa(evt);
            }
        });
        cmbtipo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbtipoMouseClicked(evt);
            }
        });
        getContentPane().add(cmbtipo);
        cmbtipo.setBounds(200, 440, 138, 30);

        jLabel17.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel17.setText("FECHA");
        getContentPane().add(jLabel17);
        jLabel17.setBounds(200, 370, 47, 17);

        lbltipo.setBackground(java.awt.Color.green);
        lbltipo.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lbltipo.setOpaque(true);
        getContentPane().add(lbltipo);
        lbltipo.setBounds(10, 440, 138, 30);

        txttipo.setEditable(false);
        txttipo.setColumns(20);
        txttipo.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txttipo.setLineWrap(true);
        txttipo.setRows(5);
        txttipo.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txttipo.setPreferredSize(new java.awt.Dimension(230, 74));
        jScrollPane3.setViewportView(txttipo);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(10, 340, 140, 80);

        setBounds(0, 0, 531, 570);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //p_control con = p_control.getInstancia();
        d_gastos_inq gas = null;
        Boolean eliminagastoquenoesalquiler = false;
        d_inquilino inq = new d_inquilino();

        try {
            controlarclave();
            if (mov == null) {
                return;
            }
            inq = inq.buscarinquilino(mov.getProp_id(), mov.getInq_casa());
            if (mov != null) {
                int ax = JOptionPane.showConfirmDialog(null,
                        "¿DESEA ELIMINAR LOS DATOS?", "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
                if (ax == JOptionPane.YES_OPTION) {
                    generarnotacredito();
                    if (esunconvenioreintegro()) {
                        mov.eliminarmovimiento(mov.getId());
                        actualizargrupoirpf();
                        //actualizarsaldo();
                        //ver si es prop o inquilino y actualizar saldo
                        JOptionPane.showMessageDialog(this, "MOVIMIENTO ELIMINADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                        //ACTUALIZA EL SALDO ACTUAL DEL INQUILINO
                        if (aplicaactualizarsaldo(mov.getMqp(), mov.getAqp())) {
                            if (inq != null) {
                                inq.actualizarsaldo(inq.getProp_id(), inq.getInq_casa(), (inq.getInq_saldo() + mov.getEntrada()));
                            }
                        }
                        actualizarsaldoprop();
                        escribirfichero_eliminamov(mov);
                        this.setVisible(false);
                        actualizar_mov();
                        return;
                    }
                    //buscar que mes y año no esten pagos con saldo alquiler
                    if (mov.getDetalle().equals("A CUENTA ALQUILER")) {
                        d_movimiento pmov = new d_movimiento();
                        pmov.setProp_id(mov.getProp_id());
                        pmov.setInq_casa(mov.getInq_casa());
                        pmov.setAqp(mov.getAqp());
                        pmov.setMqp(mov.getMqp());
                        pmov.setDetalle(mov.getDetalle());
                        pmov = pmov.buscarsaldoalquiler(pmov);
                        if (pmov != null) {
                            JOptionPane.showMessageDialog(this, toUpperCase("debe eliminar primero el saldo del alquiler, antes de eliminar una entrega"), "ERROR", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        d_gastos_inq gas1 = new d_gastos_inq();
                        gas1.setProp_id(mov.getProp_id());
                        gas1.setInq_casa(mov.getInq_casa());
                        gas1.setAqp(mov.getAqp());
                        gas1.setMqp(mov.getMqp());
                        gas1 = gas1.buscargasto_entregaacuenta(gas1);
                        if (gas1 == null) {
                            return;
                        }
                        gas1.setImporte(gas1.getImporte() + mov.getEntrada());
                        gas1.actualizarimporte_luegodeentrega(gas1);
                    }
                    eliminagastoquenoesalquiler = eliminagastoquenoesalquiler(mov);
                    if (eliminagastoquenoesalquiler) {
                        mov.eliminarmovimiento(mov.getId());
                        //actualizarsaldoalquiler();
                        actualizargrupoirpf();
                        //actualizarsaldo();
                        //ver si es prop o inquilino y actualizar saldo

                        JOptionPane.showMessageDialog(this, "MOVIMIENTO ELIMINADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                        actualizarsaldoprop();
                        //ACTUALIZA EL SALDO ACTUAL DEL INQUILINO
                        if (aplicaactualizarsaldo(mov.getMqp(), mov.getAqp())) {
                            inq.actualizarsaldo(inq.getProp_id(), inq.getInq_casa(), (inq.getInq_saldo() + mov.getEntrada()));
                        }
                        escribirfichero_eliminamov(mov);
                        this.setVisible(false);
                        actualizar_mov();
                        return;
                    }

                    mov.eliminarmovimiento(mov.getId());
                    //SI ES ALQUILER DIAS, ACTUALIZAR EL ESTADO A 0, en gastos_inq
                    gas = new d_gastos_inq();
                    gas.setProp_id(mov.getProp_id());
                    gas.setInq_casa(mov.getInq_casa());
                    gas.setDetalle(mov.getDetalle());
                    gas.setMqp(mov.getMqp());
                    gas.setAqp(mov.getAqp());
                    gas.setEstado(1);
                    gas = gas.buscargastoporinqpagado(gas);
                    if (gas != null) {
                        gas.setEstado(0);
                        gas.setImporte(mov.getEntrada());
                        gas.guardargastoinq(gas);
                    }
                    //actualizarsaldoalquiler();
                    actualizargrupoirpf();
                    //actualizarsaldo();
                    //ver si es prop o inquilino y actualizar saldo
                    JOptionPane.showMessageDialog(this, "MOVIMIENTO ELIMINADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                    //ACTUALIZA EL SALDO ACTUAL DEL INQUILINO
                    if (aplicaactualizarsaldo(mov.getMqp(), mov.getAqp())) {
                        if (inq != null) {
                            inq.actualizarsaldo(inq.getProp_id(), inq.getInq_casa(), (inq.getInq_saldo() + mov.getEntrada()));
                        }
                    }
                    actualizarsaldoprop();
                    escribirfichero_eliminamov(mov);
                    this.setVisible(false);
                    actualizar_mov();

                    //con.actualizarlistadomovimientos();
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    Boolean aplicaactualizarsaldo(int mqp, int aqp) {
        Date fecha = new Date();
        int mqpfechaactual = devuelvemes(fecha);
        int aqpfechaactual = devuelveanio(fecha);

        if (mqpfechaactual == mqp && aqpfechaactual == aqp) {
            return false;
        }
        return true;
    }

    Boolean esunconvenioreintegro() throws Exception {
        d_gastos_inq gas = new d_gastos_inq();

        if (mov == null) {
            return false;
        }

        gas.setProp_id(mov.getProp_id());
        gas.setInq_casa(mov.getInq_casa());
        gas.setDetalle(mov.getDetalle());
        gas.setMqp(mov.getMqp());
        gas.setAqp(mov.getAqp());

        gas = gas.buscarconvenioreintegroabonado(gas);

        if (gas == null) {
            return false;
        }

        gas.setEstado(2);
        gas.cambiarestadoconvenioreintegro(gas);
        return true;
    }

    Boolean eliminagastoquenoesalquiler(d_movimiento mov) throws Exception {
        Boolean elimina = false;

        if (mov == null) {
            return false;
        }

        if (mov.getDetalle().equals("ALQUILER")) {
            return false;
        }
        if (mov.getDetalle().equals("A CUENTA ALQUILER")) {
            return false;
        }
        if (mov.getDetalle().equals("SALDO ALQUILER")) {
            return false;
        }
        if (mov.getDetalle().equals("ALQUILER DIAS")) {
            return false;
        }

        String aRemplazar = mov.getDetalle();
        String remplazado = aRemplazar.replace("A CUENTA: ", "");

        d_gastos_inq gi = new d_gastos_inq();
        gi.setProp_id(mov.getProp_id());
        gi.setInq_casa(mov.getInq_casa());
        gi.setDetalle(remplazado);
        gi.setMqp(mov.getMqp());
        gi.setAqp(mov.getAqp());
        gi = gi.buscargastoporinqpendiente(gi);

        if (gi == null) {
            return false;
        }
        float nuevomonto = gi.getImporte() + mov.getEntrada();
        gi.setImporte(nuevomonto);
        gi.guardargastoinq(gi);
        elimina = true;
        //System.out.print(remplazado);
        return elimina;
    }

    void escribirfichero_eliminamov(d_movimiento mov) throws Exception {
        //p_control con = p_control.getInstancia();

        con.escribirfichero("se elimina movimiento: " + mov.getId() + " -- " + "id prop.: " + mov.getProp_id() + " -- " + "id inq.: " + mov.getInq_casa() + " -- "
                + "mqp: " + mov.getMqp() + " -- " + "aqp: " + mov.getAqp() + " -- " + "detalle: " + mov.getDetalle() + " -- " + "entrada: " + con.mostrarnumero(mov.getEntrada()) + " -- "
                + "salida: " + con.mostrarnumero(mov.getSalida()) + " -- " + "comision: " + con.mostrarnumero(mov.getComision()) + " -- " + "iva: " + con.mostrarnumero(mov.getIva()) + " -- " + "tipo: " + mov.getTipo() + " -- "
                + "fecha: " + parsefechastring(mov.getFecha()) + " -- " + "irpf: " + con.mostrarnumero(mov.getIrpf()) + " -- " + "irpf tipo: " + mov.getIrpftipo());

    }

    String parsefechalogstring(java.util.Date fecha) {
        SimpleDateFormat formato = new SimpleDateFormat("HH:mm:ss dd/MM/yyyy");
        String fechastr = formato.format(fecha);

        return fechastr;
    }

    String parsefechastring(java.util.Date fecha) {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        String fechastr = formato.format(fecha);

        return fechastr;
    }

    void generarnotacredito() throws Exception {
        if (mov == null) {
            return;
        }

        d_cfe cfe = new d_cfe();
        d_parametroscfe pcfe = new d_parametroscfe();
        SICFERespuestaEnvioCFE envio = new SICFERespuestaEnvioCFE();
        d_generarcfe gt = new d_generarcfe();
        Integer i = -1;
        int tipo_de_nota = 0;

        pcfe = pcfe.buscarparametroscfe();
        if (pcfe == null) {
            throw new Exception("debe ingresar parametros cfe: nombre, clave y tenant");
        }

        cfe = cfe.buscarcfe(mov.getId());

        if (cfe == null) {
            return;
        }

        //controlar que no tenga nota de credito ya ingresada (if cfe.tipo)
        gt = gt.ticketdefecto();
        //ver si es necesario cambiar alguna variable de ticket por defecto
        if (cfe.getTipo().equals(101)) {
            if (esticketinmo()) {
                //gt.setCfexml(gt.cfexmlnotacreditofactura_emitida(nombre, rut, direccion, concepto, total_recibido, iva_recibido, adenda, fecha_recibida, cfe.getNumero()));
                String nombre, ci, direccion, concepto, adenda;
                Float importe, iva;
                String xml = obtenerCFEPorID_funcion_devuelvexml();
                d_xml dx = new d_xml();
                nombre = dx.recibexmlfacturaydevuelvenombrecliente(xml);
                ci = dx.recibexmlfacturaydevuelverutcliente(xml);
                direccion = dx.recibexmlfacturaydevuelvedireccioncliente(xml);
                concepto = dx.recibexmlfacturaydevuelveconcepto(xml);
                adenda = "ID TRANSACC.:\n" + mov.getId();
                importe = Float.parseFloat(dx.recibexmlfacturaydevuelvetotalsiniva(xml));
                iva = devuelveiva(importe);
                Date fecha = fechaactual();
                gt.setCfexml(gt.cfexmlnotacreditoeticket_emitida(nombre, ci, direccion, concepto, importe, iva, adenda, fecha, cfe.getNumero()));
            } else {
                gt.setCfexml(gt.cfexmlnotacreditoticket(mov, cfe.getNumero()));
            }

        }
        if (cfe.getTipo().equals(111)) {
            gt.setCfexml(gt.cfexmlnotacreditofactura(mov, cfe.getNumero()));
        }
        if (!cfe.getTipo().equals(101) && !cfe.getTipo().equals(111)) {
            return;
        }

        int ax = JOptionPane.showConfirmDialog(null, toUpperCase("antes de eliminar el movimiento, debe generar una nota de credito \n ¿desea continuar?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
        if (ax == JOptionPane.NO_OPTION || ax == JOptionPane.CANCEL_OPTION) {
            throw new Exception("no se puede continuar el procedimiento de eliminacion");
        }

        //gt.setReferenciaERP("56555");
        gt.setNomusuario(pcfe.getNomusuario());
        gt.setClave(pcfe.getClave());
        gt.setTenant(pcfe.getTenant());
        //int x = 100000 + mov.getId();
        if (cfe.getTipo() == 101) {
            tipo_de_nota = 102;
        }
        if (cfe.getTipo() == 111) {
            tipo_de_nota = 112;
        }

        //int x = (con.obtenerMayorNumDOCCFE(tipo_de_nota) + 1);
        int x = ((con.maximo_mov() + 1) * 100);
        gt.setReferenciaERP(String.valueOf(x));
        envio = envioCFE(gt.getNomusuario(), gt.getClave(),
                gt.getTenant(), gt.getCliente(), gt.getCfexml(), gt.getReferenciaERP(),
                gt.getReferenciaERP2(), gt.getDevolverQR(), gt.getSizeQR(),
                gt.getImprime(), gt.getRecurso(), gt.getTemplate(), gt.getDevolverXML(),
                gt.getErpPideValidacion(), gt.getVersion());
        //i = envio.getCodigo();
        if (envio.getCodigo() != 0) {
            if (envio.getCodigo() == 100009) {
                while (envio.getCodigo() == 100009) {
                    x = x + 1;
                    gt.setReferenciaERP(String.valueOf(x));
                    envio = envioCFE(gt.getNomusuario(), gt.getClave(),
                            gt.getTenant(), gt.getCliente(), gt.getCfexml(), gt.getReferenciaERP(),
                            gt.getReferenciaERP2(), gt.getDevolverQR(), gt.getSizeQR(),
                            gt.getImprime(), gt.getRecurso(), gt.getTemplate(), gt.getDevolverXML(),
                            gt.getErpPideValidacion(), gt.getVersion());
                    if (envio.getCodigo() == 0) {
                        break;
                    }
                }
            } else {
                throw new Exception(envio.getDescripcion().getValue());
            }
        }
        //throw new Exception(envio.getDescripcion().getValue());

        guardarcfe(mov.getId(), "A", envio.getIdCFE().getValue().getNumero(),
                envio.getIdCFE().getValue().getRucemisor().getValue(),
                envio.getIdCFE().getValue().getTipo(), envio.getIdCFE().getValue().getObservado());
        //int numserie=envio.getIdCFE().getValue().getNumero();
        //throw new Exception(envio.getDescripcion().getValue());
        //JOptionPane.showMessageDialog(null,numserie);
        JOptionPane.showMessageDialog(this, "CFE GUARDADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
    }

    Float devuelveiva(Float importe) throws Exception { //recibe comision
        d_parametro par = new d_parametro();
        Float iva = 0.0F;

        par = par.buscarparametro();

        iva = importe * par.getIva() / 100;

        return iva;
    }

    Date fechaactual() throws Exception {
        SimpleDateFormat formateador = new SimpleDateFormat("dd/MM/yyyy", new Locale("es_ES"));
        String fechastr = (formateador.format(new Date()));

        return parsefechadate_devuelvedate(fechastr);
    }

    Date parsefechadate_devuelvedate(String fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        Date fechaDate = null;

        try {
            fechaDate = formato.parse(fecha);
        } catch (ParseException ex) {
            throw new Exception("revise formato de año");
        }
        return fechaDate;
    }

    Boolean esticketinmo() {
        if ((mov.getProp_id() == 0) && (mov.getIrpftipo().equals("101"))) {
            return true;
        } else {
            return false;
        }
    }

    String devuelvecieticket(int parte) {//4
        String tipo = mov.getTipo();
        String[] parts = tipo.split("_");
        return parts[parte];//CI PARTE 4
    }

    String obtenerCFEPorID_funcion_devuelvexml() throws Exception {
        if (mov == null) {
            return "";
        }

        d_cfe cfe = new d_cfe();
        controlarclave();
        d_parametroscfe pcfe = new d_parametroscfe();
        //buscar movimiento y parametroscfe que trae usuario, clave, tenant
        SICFERespuestaObtenerCFE obtenerVersion = new SICFERespuestaObtenerCFE();
        QName fooQNameSerie = new QName("http://schemas.datacontract.org/2004/07/SICFEContract", "Serie");
        QName fooQNameRucemisor = new QName("http://schemas.datacontract.org/2004/07/SICFEContract", "rucemisor");
        org.datacontract.schemas._2004._07.sicfecontract.IdCFE i = new org.datacontract.schemas._2004._07.sicfecontract.IdCFE();

        pcfe = pcfe.buscarparametroscfe();
        if (pcfe == null) {
            throw new Exception("debe ingresar parametros cfe: nombre, clave y tenant");
        }
        cfe = cfe.buscarcfe(mov.getId());
        if (cfe == null) {
            throw new Exception("no existe pdf solicitado");
        }

        JAXBElement<String> serie = new JAXBElement<String>(fooQNameSerie, String.class, cfe.getSerie());
        JAXBElement<String> rucemisor = new JAXBElement<String>(fooQNameRucemisor, String.class, cfe.getRucemisor());
        /*
            JAXBElement<String> rucemisor = new JAXBElement<>(new QName(org.datacontract.schemas._2004._07.sicfecontract.IdCFE.class.getSimpleName()),
                String.class, "rucemisor");
            rucemisor.setValue("120196190011");
         */
        i.setRucemisor(rucemisor);
        i.setSerie(serie);
        i.setTipo(cfe.getTipo());
        i.setNumero(cfe.getNumero());
        i.setObservado(cfe.getObservado());
        obtenerVersion = obtenerCFEPorID(pcfe.getNomusuario(), pcfe.getClave(), pcfe.getTenant(), i.getTipo(), cfe.getSerie(), i.getNumero(), true);
        if (obtenerVersion.getCodigo() != 0) {
            throw new Exception("CFE solicitado no existe, o no fue ingresado");
        }
        return obtenerVersion.getXml().getValue();
    }

    private static SICFERespuestaObtenerCFE obtenerCFEPorID(java.lang.String usuario, java.lang.String clave, java.lang.String tenant, Integer tipo, java.lang.String serie, Integer numero, java.lang.Boolean devolverXML) {
        org.tempuri.ImpSICFEEmisor service = new org.tempuri.ImpSICFEEmisor();
        org.tempuri.ISICFEEmisor port = service.getBasicHttpBindingISICFEEmisor();
        return port.obtenerCFEPorID(usuario, clave, tenant, tipo.shortValue(), serie, numero.longValue(), true, devolverXML);
    }

    void actualizarsaldoprop() {
        d_propietario pro1 = null;
        Float saldo = 0f;

        try {
            pro1 = new d_propietario();
            saldo = pro1.saldototalprop(mov.getProp_id());
            pro1.actualizarsaldoprop(mov.getProp_id(), saldo);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }

    void actualizargrupoirpf() throws Exception {
        List<d_grupoirpf> listagrupoirpf = new ArrayList<d_grupoirpf>();
        d_grupoirpf gru = new d_grupoirpf();
        Float montoirpf = 0f;
        Date fechadate = null;
        String fecha = "";
        Integer mes = -1;
        Integer anio = -1;

        fechadate = mov.getFecha();

        mes = devuelvemes(fechadate);
        anio = devuelveanio(fechadate);
        fecha = mes.toString() + anio.toString();

        if (mov.getIrpftipo().equals("SI")) {
            montoirpf = mov.obtenertotalirpfpormes(mov.getProp_id(), mes, anio);
            listagrupoirpf = gru.listarciporproppago(mov.getProp_id());
            //recorrer lista y actualizar montos
            //irpf = importereajustado * par.getIrpf() / 100;
            if (listagrupoirpf.size() > 0) {
                for (d_grupoirpf aux : listagrupoirpf) {
                    gru = grupoirpfdeprop(aux.getCigrupo(), mov.getProp_id());
                    if (existeciparafecha(gru.getCigrupo(), fecha, mov.getProp_id())) {//cigrupo,fecha
                        //actualizar
                        gru.setMonto(montoirpf * gru.getPorcentaje() / 100);
                        gru.setFecha(fecha);
                        gru.actualizarmontogrupoirpf(gru);
                    }
                }
            }
        }
    }

    Boolean existeciparafecha(String cigrupo, String fecha, Integer prop_id) throws Exception {
        d_grupoirpf aux = new d_grupoirpf();

        aux = aux.existeciparafecha(cigrupo, fecha, prop_id);
        if (aux != null) {
            return true;
        }

        return false;
    }

    d_grupoirpf grupoirpfdeprop(String cigrupo, Integer prop_id) throws Exception {
        d_grupoirpf aux = new d_grupoirpf();

        return aux.grupoirpfdeprop(cigrupo, prop_id);
    }

    Integer devuelvemes(Date fecha) {
        String formato = "MM";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(fecha));
    }

    Integer devuelveanio(Date fecha) {
        String formato = "yyyy";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(fecha));
    }

    String extraerfecha() {
        DateFormat formatoFecha = new SimpleDateFormat("Myyyy");
        String resultado = "";

        resultado = formatoFecha.format(mov.getFecha());

        return resultado;
    }

    void actualizarsaldoalquiler() throws Exception {
        //CORREGIR ESTA FUNCION, NO SE USA
        d_gastos_inq gas = new d_gastos_inq();

        gas.setProp_id(mov.getProp_id());
        gas.setInq_casa(mov.getInq_casa());
        gas.setAqp(mov.getAqp());
        gas.setMqp(mov.getMqp());
        gas.setImporte(mov.getEntrada());
        gas.setDetalle("SALDO ALQUILER");

        gas.actualizarsaldoalquiler(gas);
    }

    void controlar_campos() throws Exception {
        if (txtprop_id.getText().equals("")) {
            throw new Exception("PROP ID NO PUEDE ESTAR VACÍO");
        }
        if (txtinq_casa.getText().equals("")) {
            throw new Exception("INQ CASA NO PUEDE ESTAR VACÍO");
        }
        if (txtmqp.getText().equals("")) {
            throw new Exception("MQP NO PUEDE ESTAR VACÍO");
        }
        if (txtaqp.getText().equals("")) {
            throw new Exception("AQP NO PUEDE ESTAR VACÍO");
        }
        if (txtdetalle.getText().equals("")) {
            throw new Exception("DETALLE NO PUEDE ESTAR VACÍO");
        }
        if (txtentrada.getText().equals("")) {
            throw new Exception("ENTRADA NO PUEDE ESTAR VACÍO");
        }
        if (txtsalida.getText().equals("")) {
            throw new Exception("SALIDA NO PUEDE ESTAR VACÍO");
        }
        if (txtirpf.getText().equals("")) {
            throw new Exception("IRPF NO PUEDE ESTAR VACÍO");
        }
        if (txtiva.getText().equals("")) {
            throw new Exception("IVA NO PUEDE ESTAR VACÍO");
        }
        if (txtcomision.getText().equals("")) {
            throw new Exception("COMISION NO PUEDE ESTAR VACÍO");
        }
        if (jdcfecha.getDate()==null) {
            throw new Exception("FECHA NO PUEDE ESTAR VACÍO");
        }
        
    }
    
    void controlarclave() throws Exception {
        d_clave cla = new d_clave();
        d_configuracion conf = new d_configuracion();

        conf = conf.buscarconfiguracion();

        if (conf.getClave().equals("NO")) {
            return;
        }

        cla = cla.buscarclave();

        if (!txtclave.getText().equals(cla.getClave())) {
            throw new Exception("CLAVE INCORRECTA");
        }
    }

    void actualizarsaldo() throws Exception {
        d_propietario prop = null;
        d_inquilino inq = null;

        if (mov.getProp_id() != 0 && mov.getInq_casa() != 0) {
            inq = new d_inquilino();
            inq = inq.buscarinquilino(mov.getProp_id(), mov.getInq_casa());
            inq.setInq_saldo(inq.getInq_saldo() + mov.getEntrada());
            inq.guardarinquilino(inq);
        }
        if (mov.getProp_id() != 0 && mov.getInq_casa() == 0) {
            prop = new d_propietario();
            prop = prop.buscarpropietario(mov.getProp_id());
            if (mov.getSalida() == 0) {
                prop.setProp_saldo(inq.getInq_saldo() + mov.getEntrada());
            }
            if (mov.getEntrada() == 0) {
                prop.setProp_saldo(inq.getInq_saldo() - mov.getSalida());
            }
            prop.guardarpropietario(prop);
        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //p_control con = p_control.getInstancia();
        d_movimiento mov = new d_movimiento();
        Date fecha = null;

        try {
            controlar_campos();
            controlarclave();
            
            mov.setId(Integer.parseInt(txtid.getText()));
            mov.setProp_id(Integer.parseInt(txtprop_id.getText()));
            mov.setInq_casa(Integer.parseInt(txtinq_casa.getText()));
            mov.setMqp(Integer.parseInt(txtmqp.getText()));
            mov.setAqp(Integer.parseInt(txtaqp.getText()));
            mov.setDetalle(txtdetalle.getText());
            mov.setEntrada(con.guardarnumero((txtentrada.getText())));
            mov.setSalida(con.guardarnumero((txtsalida.getText())));
            mov.setComision(con.guardarnumero((txtcomision.getText())));
            mov.setIva(con.guardarnumero((txtiva.getText())));
            mov.setTipo(txttipo.getText());
            fecha = parsefechadate(jdcfecha.getDate());
            mov.setIrpf(con.guardarnumero((txtirpf.getText())));
            mov.setFecha(fecha);
            mov.setTipopago(lbltipo.getText());
            int ax = JOptionPane.showConfirmDialog(null,
                    "¿DESEA ACTUALIZAR LOS DATOS?", "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
            if (ax == JOptionPane.YES_OPTION) {
                mov.actualizarmovimiento(mov);
                actualizargrupoirpf();
                //ACTUALIZAR DATOS SI ES ALQUILER DIAS
                con.escribirfichero("se edita movimiento: " + mov.getId() + " -- " + "id prop.: " + mov.getProp_id() + " -- " + "id inq.: " + mov.getInq_casa() + " -- "
                        + "mqp: " + mov.getMqp() + " -- " + "aqp: " + mov.getAqp() + " -- " + "detalle: " + mov.getDetalle() + " -- " + "entrada: " + con.mostrarnumero(mov.getEntrada()) + " -- "
                        + "salida: " + con.mostrarnumero(mov.getSalida()) + " -- " + "comision: " + con.mostrarnumero(mov.getComision()) + " -- " + "iva: " + con.mostrarnumero(mov.getIva()) + " -- " + "tipo: " + mov.getTipo() + " -- "
                        + "fecha: " + parsefechastring(mov.getFecha()) + " -- " + "irpf: " + con.mostrarnumero(mov.getIrpf()));
                JOptionPane.showMessageDialog(this, "MOVIMIENTO ACTUALIZADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                actualizar_mov();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            if (mov == null) {
                return;
            }
            mov = mov.buscarmovimiento(mov.getId());
            controlarclave();
            //CFE();
            obtenercirut(mov.getProp_id(), mov);
            txtcfe.setText(cargartipocfe());
            actualizar_mov();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    void obtenercirut(int prop_id, d_movimiento mov) throws Exception {
        String resultado = "";
        d_propietario prop = new d_propietario();
        d_configuracion conf = new d_configuracion();

        conf = conf.buscarconfiguracion();

        if (conf.getCfe().equals("NO")) {
            throw new Exception("no está habilitada la emision de CFE en configuracion");
        }

        prop = prop.buscarpropietario(prop_id);
        String limpiastring = prop.getProp_cirut().replace(".", "").replace("-", "");
        if (!limpiastring.equals(prop.getProp_cirut())) {
            prop.setProp_cirut(limpiastring);
            prop.guardarpropietario(prop);
        }
        if (limpiastring.length() == 8) {
            //es ci - genera e-ticket 
            CFEeticket(mov);

        } else {
            //es rut - genera e-factura
            CFEefactura(mov);
        }
    }

    void CFEeticket(d_movimiento mov) throws Exception {
        //primero chequear que id mov no este en la nueva tabla que guarda cfe
        d_cfe cfe = new d_cfe();
        d_parametroscfe pcfe = new d_parametroscfe();
        SICFERespuestaEnvioCFE envio = new SICFERespuestaEnvioCFE();
        d_generarcfe gt = new d_generarcfe();
        Integer i = -1;

        pcfe = pcfe.buscarparametroscfe();
        if (pcfe == null) {
            throw new Exception("debe ingresar parametros cfe: nombre, clave y tenant");
        }

        cfe = devuelve_cfe(mov.getId());
        if (cfe != null) {
            guardarcfe(cfe.getIdmov(), cfe.getSerie(), cfe.getNumero(), cfe.getRucemisor(), cfe.getTipo(), cfe.getObservado());
            actualizar_mov();
            return;
        }
        cfe = new d_cfe();

        cfe = cfe.buscarcfe(mov.getId());

        if (cfe != null) {
            throw new Exception("movimiento ya cuenta con factura electronica");
        }

        gt = gt.ticketdefecto();
        //ver si es necesario cambiar alguna variable de ticket por defecto
        gt.setCfexml(gt.cfexmlticket(mov));
        //gt.setReferenciaERP("56555");
        gt.setNomusuario(pcfe.getNomusuario());
        gt.setClave(pcfe.getClave());
        gt.setTenant(pcfe.getTenant());

        //Integer id = (con.obtenerMayorNumDOCCFE(101) + 1);
        Integer id = mov.getId();
        gt.setReferenciaERP(String.valueOf(id));
        envio = envioCFE(gt.getNomusuario(), gt.getClave(),
                gt.getTenant(), gt.getCliente(), gt.getCfexml(), gt.getReferenciaERP(),
                gt.getReferenciaERP2(), gt.getDevolverQR(), gt.getSizeQR(),
                gt.getImprime(), gt.getRecurso(), gt.getTemplate(), gt.getDevolverXML(),
                gt.getErpPideValidacion(), gt.getVersion());
        //i = envio.getCodigo();
        if (envio.getCodigo() != 0) {
            if (envio.getCodigo() == 100009) {
                throw new Exception(envio.getDescripcion().getValue());
            }
        } else {
            guardarcfe(mov.getId(), "A", envio.getIdCFE().getValue().getNumero(),
                    envio.getIdCFE().getValue().getRucemisor().getValue(),
                    envio.getIdCFE().getValue().getTipo(), envio.getIdCFE().getValue().getObservado());
        }
        //int numserie=envio.getIdCFE().getValue().getNumero();
        //throw new Exception(envio.getDescripcion().getValue());
        //JOptionPane.showMessageDialog(null,numserie);
        JOptionPane.showMessageDialog(this, "CFE GUARDADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
        actualizar_mov();
    }

    void CFEefactura(d_movimiento mov) throws Exception {
        //primero chequear que id mov no este en la nueva tabla que guarda cfe
        d_cfe cfe = new d_cfe();
        d_parametroscfe pcfe = new d_parametroscfe();
        SICFERespuestaEnvioCFE envio = new SICFERespuestaEnvioCFE();
        d_generarcfe gt = new d_generarcfe();
        Integer i = -1;

        pcfe = pcfe.buscarparametroscfe();
        if (pcfe == null) {
            throw new Exception("debe ingresar parametros cfe: nombre, clave y tenant");
        }

        cfe = devuelve_cfe(mov.getId());
        if (cfe != null) {
            guardarcfe(cfe.getIdmov(), cfe.getSerie(), cfe.getNumero(), cfe.getRucemisor(), cfe.getTipo(), cfe.getObservado());
            actualizar_mov();
            return;
        }
        cfe = new d_cfe();

        cfe = cfe.buscarcfe(mov.getId());

        if (cfe != null) {
            throw new Exception("movimiento ya cuenta con factura electronica");
        }

        gt = gt.ticketdefecto();
        //ver si es necesario cambiar alguna variable de ticket por defecto
        gt.setCfexml(gt.cfexmlfactura(mov));
        //gt.setReferenciaERP("56555");
        gt.setNomusuario(pcfe.getNomusuario());
        gt.setClave(pcfe.getClave());
        gt.setTenant(pcfe.getTenant());
        Integer id = mov.getId();
        gt.setReferenciaERP(String.valueOf(id));
        envio = envioCFE(gt.getNomusuario(), gt.getClave(),
                gt.getTenant(), gt.getCliente(), gt.getCfexml(), gt.getReferenciaERP(),
                gt.getReferenciaERP2(), gt.getDevolverQR(), gt.getSizeQR(),
                gt.getImprime(), gt.getRecurso(), gt.getTemplate(), gt.getDevolverXML(),
                gt.getErpPideValidacion(), gt.getVersion());
        //i = envio.getCodigo();

        if (envio.getCodigo() != 0) {
            if (envio.getCodigo() == 100009) {
                throw new Exception(envio.getDescripcion().getValue());
            }
        } else {
            guardarcfe(mov.getId(), "A", envio.getIdCFE().getValue().getNumero(),
                    envio.getIdCFE().getValue().getRucemisor().getValue(),
                    envio.getIdCFE().getValue().getTipo(), envio.getIdCFE().getValue().getObservado());
        }
        JOptionPane.showMessageDialog(this, "CFE GUARDADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
        actualizar_mov();
    }

    d_cfe devuelve_cfe(int id_mov) throws Exception {
        d_xml dx = new d_xml();
        d_cfe cfe;
        String xml;
        //111_A _119
        xml = con.tiene_doc_dgi(id_mov);

        if (!xml.equals("")) {
            String serie, tipo, numero;
            String[] parts = xml.split("_");
            tipo = parts[0];
            serie = parts[1];
            numero = parts[2];
            String serie_limpia = serie.trim();
            cfe = new d_cfe();
            cfe.setIdmov(id_mov);
            cfe.setSerie(serie_limpia);
            cfe.setNumero(Integer.valueOf(numero));
            cfe.setRucemisor("120196190011");
            cfe.setTipo(Integer.valueOf(tipo));
            cfe.setObservado(1);
        } else {
            return null;
        }
        return cfe;
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        /*
        SICFERespuestaVersion obtenerVersion = new SICFERespuestaVersion();
        obtenerVersion = obtenerVersion();
        JOptionPane.showMessageDialog(null, obtenerVersion.getVersionBD());
         */
        try {
            controlarclave();
            if (mov == null) {
                return;
            }
            mov = mov.buscarmovimiento(mov.getId());
            d_parametroscfe pcfe = new d_parametroscfe();
            d_cfe cfe = new d_cfe();
            //buscar movimiento y parametroscfe que trae usuario, clave, tenant
            SICFERespuestaBuffer obtenerVersion = new SICFERespuestaBuffer();
            QName fooQNameSerie = new QName("http://schemas.datacontract.org/2004/07/SICFEContract", "Serie");
            QName fooQNameRucemisor = new QName("http://schemas.datacontract.org/2004/07/SICFEContract", "rucemisor");
            org.datacontract.schemas._2004._07.sicfecontract.IdCFE i = new org.datacontract.schemas._2004._07.sicfecontract.IdCFE();

            pcfe = pcfe.buscarparametroscfe();
            if (pcfe == null) {
                throw new Exception("debe ingresar parametros cfe: nombre, clave y tenant");
            }
            cfe = cfe.buscarcfe(mov.getId());
            if (cfe == null) {
                throw new Exception("no existe pdf solicitado");
            }

            JAXBElement<String> serie = new JAXBElement<String>(fooQNameSerie, String.class, cfe.getSerie());
            JAXBElement<String> rucemisor = new JAXBElement<String>(fooQNameRucemisor, String.class, cfe.getRucemisor());
            /*
            JAXBElement<String> rucemisor = new JAXBElement<>(new QName(org.datacontract.schemas._2004._07.sicfecontract.IdCFE.class.getSimpleName()),
                    String.class, "rucemisor");
            rucemisor.setValue("120196190011");
             */
            i.setRucemisor(rucemisor);
            i.setSerie(serie);
            i.setTipo(cfe.getTipo());
            i.setNumero(cfe.getNumero());
            i.setObservado(cfe.getObservado());
            obtenerVersion = obtenerPDF(pcfe.getNomusuario(), pcfe.getClave(), i, pcfe.getTenant(), "");
            if (obtenerVersion.getCodigo() != 0) {
                throw new Exception("CFE solicitado no existe, o no fue ingresado");
            }
            pdf(obtenerVersion);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void txtidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtidActionPerformed

    private void cmbtipoa(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbtipoa
        String tipo = "";

        tipo = cmbtipo.getSelectedItem().toString();

        lbltipo.setText(tipo);
    }//GEN-LAST:event_cmbtipoa

    private void cmbtipoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbtipoMouseClicked

    }//GEN-LAST:event_cmbtipoMouseClicked

    void guardarcfe(Integer idmov, String serie, Integer numero, String rucemisor, Integer tipo, Integer observado) throws Exception {
        //p_control con = p_control.getInstancia();
        d_cfe cfe = new d_cfe();

        cfe.setIdmov(idmov);
        cfe.setSerie(serie);
        cfe.setNumero(numero);
        cfe.setRucemisor(rucemisor);
        cfe.setTipo(tipo);
        cfe.setObservado(observado);

        cfe.guardarcfe(cfe);
        con.escribirfichero("se crea documento dgi, movimiento: " + idmov + " -- serie: " + serie + " -- numero: " + numero + " -- ruc emisor: " + rucemisor + " -- tipo: " + tipo + " -- observado: " + observado);
    }

    void pdf(SICFERespuestaBuffer obtenerVersion) throws FileNotFoundException, IOException {
        QName fooQNameSerie = new QName("http://schemas.datacontract.org/2004/07/SICFEContract", "Buffer");
        JAXBElement<byte[]> buffer = new JAXBElement<byte[]>(fooQNameSerie, byte[].class, new byte[obtenerVersion.getBuffer().getValue().length]);
        buffer = obtenerVersion.getBuffer();

        byte[] bytes = new byte[buffer.getValue().length];
        bytes = buffer.getValue();

        //below is the different part
        String nombrearch = "cfe-" + mov.getId() + ".pdf";
        File someFile = new File(nombrearch);
        someFile.createNewFile();
        FileOutputStream fos = new FileOutputStream(someFile);
        fos.write(bytes);
        fos.flush();
        fos.close();
        Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + nombrearch);
    }

    Map obtenerobj(String variable, String valor) {
        Map<String, String> arreglo_asociativo = new HashMap<String, String>();
        arreglo_asociativo.put(variable, valor);
        //arreglo_asociativo .get("pepe"); 
        //Map<String, String> user = new LinkedHashMap<String, String>();
        //user.put("tipo", "111");
        //user.put("serie", "A");
        //user.put("numero", "16");
        //user.put("rucemisor", "120196190011");
        //user.put("observado", "1");
        /*
        String[] xml = "{" < sic:Numero > 16 <  / sic:Numero >\n
    
    ," +
"            <!--Optional:-->\n," +
"            <sic:Serie>A</sic:Serie>\n," +
"            <!--Optional:-->\n," +
"            <sic:Tipo>111</sic:Tipo>\n," +
"            <!--Optional:-->\n," +
"            <sic:observado>1</sic:observado>\n," +
"            <!--Optional:-->\n," +
"            <sic:rucemisor>120196190011</sic:rucemisor>\n"}";
         */
        return arreglo_asociativo;
    }

    void NCCFEEticket() throws Exception {
        //primero chequear que id mov no este en la nueva tabla que guarda cfe
        d_cfe cfe = new d_cfe();
        d_parametroscfe pcfe = new d_parametroscfe();
        SICFERespuestaEnvioCFE envio = new SICFERespuestaEnvioCFE();
        d_generarcfe gt = new d_generarcfe();
        Integer i = -1;

        pcfe = pcfe.buscarparametroscfe();
        if (pcfe == null) {
            throw new Exception("debe ingresar parametros cfe: nombre, clave y tenant");
        }

        cfe = cfe.buscarcfe(mov.getId());

        if (cfe == null) {
            throw new Exception("movimiento no cuenta con factura electronica");
        }

        //controlar que no tenga nota de credito ya ingresada (if cfe.tipo)
        gt = gt.ticketdefecto();
        //ver si es necesario cambiar alguna variable de ticket por defecto
        gt.setCfexml(gt.cfexmlnotacreditoticket(mov, cfe.getNumero()));
        //gt.setReferenciaERP("56555");
        gt.setNomusuario(pcfe.getNomusuario());
        gt.setClave(pcfe.getClave());
        gt.setTenant(pcfe.getTenant());
        int x = 100000 + mov.getId();
        gt.setReferenciaERP(String.valueOf(x));
        envio = envioCFE(gt.getNomusuario(), gt.getClave(),
                gt.getTenant(), gt.getCliente(), gt.getCfexml(), gt.getReferenciaERP(),
                gt.getReferenciaERP2(), gt.getDevolverQR(), gt.getSizeQR(),
                gt.getImprime(), gt.getRecurso(), gt.getTemplate(), gt.getDevolverXML(),
                gt.getErpPideValidacion(), gt.getVersion());
        //i = envio.getCodigo();
        guardarcfe(mov.getId(), "A", envio.getIdCFE().getValue().getNumero(),
                envio.getIdCFE().getValue().getRucemisor().getValue(),
                envio.getIdCFE().getValue().getTipo(), envio.getIdCFE().getValue().getObservado());
        //int numserie=envio.getIdCFE().getValue().getNumero();
        //throw new Exception(envio.getDescripcion().getValue());
        //JOptionPane.showMessageDialog(null,numserie);
        JOptionPane.showMessageDialog(this, "CFE GUARDADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
    }

    void CFE() throws Exception {
        //primero chequear que id mov no este en la nueva tabla que guarda cfe
        d_cfe cfe = new d_cfe();
        d_parametroscfe pcfe = new d_parametroscfe();
        SICFERespuestaEnvioCFE envio = new SICFERespuestaEnvioCFE();
        d_generarcfe gt = new d_generarcfe();
        Integer i = -1;

        pcfe = pcfe.buscarparametroscfe();
        if (pcfe == null) {
            throw new Exception("debe ingresar parametros cfe: nombre, clave y tenant");
        }

        cfe = cfe.buscarcfe(mov.getId());

        if (cfe != null) {
            throw new Exception("movimiento ya cuenta con factura electronica");
        }

        gt = gt.ticketdefecto();
        //ver si es necesario cambiar alguna variable de ticket por defecto
        gt.setCfexml(gt.cfexmlticket(mov));
        //gt.setReferenciaERP("56555");
        gt.setNomusuario(pcfe.getNomusuario());
        gt.setClave(pcfe.getClave());
        gt.setTenant(pcfe.getTenant());

        gt.setReferenciaERP(mov.getId().toString());
        envio = envioCFE(gt.getNomusuario(), gt.getClave(),
                gt.getTenant(), gt.getCliente(), gt.getCfexml(), gt.getReferenciaERP(),
                gt.getReferenciaERP2(), gt.getDevolverQR(), gt.getSizeQR(),
                gt.getImprime(), gt.getRecurso(), gt.getTemplate(), gt.getDevolverXML(),
                gt.getErpPideValidacion(), gt.getVersion());
        //i = envio.getCodigo();
        guardarcfe(mov.getId(), "A", envio.getIdCFE().getValue().getNumero(),
                envio.getIdCFE().getValue().getRucemisor().getValue(),
                envio.getIdCFE().getValue().getTipo(), envio.getIdCFE().getValue().getObservado());
        //int numserie=envio.getIdCFE().getValue().getNumero();
        //throw new Exception(envio.getDescripcion().getValue());
        //JOptionPane.showMessageDialog(null,numserie);
        JOptionPane.showMessageDialog(this, "CFE GUARDADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
    }

    Date parsefechadate(Date fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        Date fechaDate = null;

        try {
            String nuevafecha = formato.format(fecha);
            fechaDate = formato.parse(nuevafecha);
        } catch (Exception ex) {
            throw new Exception(ex.getMessage());
        }
        return fechaDate;
    }

    void cargarmovimiento() {
        //p_control con = p_control.getInstancia();

        try {
            if (mov != null) {
                txtcfe.setText(cargartipocfe());
                txtid.setText(mov.getId().toString());
                mov = mov.buscarmovimiento(mov.getId());
                txtprop_id.setText(mov.getProp_id().toString());
                txtinq_casa.setText(mov.getInq_casa().toString());
                txtmqp.setText(mov.getMqp().toString());
                txtaqp.setText(mov.getAqp().toString());
                txtdetalle.setText(mov.getDetalle());
                txtentrada.setText(con.mostrarnumero(mov.getEntrada()));
                txtsalida.setText(con.mostrarnumero(mov.getSalida()));
                txtcomision.setText(con.mostrarnumero(mov.getComision()));
                txtiva.setText(con.mostrarnumero(mov.getIva()));
                txttipo.setText(mov.getTipo());
                jdcfecha.setDate(mov.getFecha());
                txtirpf.setText(con.mostrarnumero(mov.getIrpf()));
                lbltipo.setText(mov.getTipopago());
                //cmbtipo.setSelectedItem(mov.getTipopago());
                con.mov = null;
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    String cargartipocfe() throws Exception {
        d_cfe cfe = new d_cfe();
        String tipo = "";

        cfe = cfe.buscarcfe(mov.getId());
        if (cfe == null) {
            tipo = "Generar CFE";
            return tipo;
        }
        if (cfe.getTipo().equals(101)) {
            tipo = "e-Ticket";
        }
        if (cfe.getTipo().equals(102)) {
            tipo = "N. Crédito e-Ticket";
        }
        if (cfe.getTipo().equals(111)) {
            tipo = "e-Factura";
        }
        if (cfe.getTipo().equals(112)) {
            tipo = "N. Crédito e-Factura";
        }
        return tipo;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(p_fichamantenimiento.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(p_fichamantenimiento.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(p_fichamantenimiento.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(p_fichamantenimiento.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                p_fichamantenimiento dialog = new p_fichamantenimiento(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbtipo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane3;
    private com.toedter.calendar.JDateChooser jdcfecha;
    private javax.swing.JLabel lbltipo;
    private javax.swing.JTextField txtaqp;
    private javax.swing.JTextField txtcfe;
    private javax.swing.JPasswordField txtclave;
    private javax.swing.JTextField txtcomision;
    private javax.swing.JTextField txtdetalle;
    private javax.swing.JTextField txtentrada;
    private javax.swing.JTextField txtid;
    private javax.swing.JTextField txtinq_casa;
    private javax.swing.JTextField txtirpf;
    private javax.swing.JTextField txtiva;
    private javax.swing.JTextField txtmqp;
    private javax.swing.JTextField txtprop_id;
    private javax.swing.JTextField txtsalida;
    private javax.swing.JTextArea txttipo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actualizar_mov() {
        //p_control con = p_control.getInstancia();

        con.actualizar_mov();
    }

    private static SICFERespuestaEnvioCFE envioCFE(java.lang.String nomusuario, java.lang.String clave,
            java.lang.String tenant, java.lang.String cliente, java.lang.String cfexml, java.lang.String referenciaERP,
            java.lang.String referenciaERP2, java.lang.Boolean devolverQR, java.lang.Integer sizeQR,
            java.lang.Integer imprime, java.lang.String recurso, java.lang.String template, java.lang.Boolean devolverXML,
            java.lang.Boolean erpPideValidacion, java.lang.String version) {
        org.tempuri.ImpSICFEEmisor service = new org.tempuri.ImpSICFEEmisor();
        org.tempuri.ISICFEEmisor port = service.getBasicHttpBindingISICFEEmisor();
        return port.envioCFE(nomusuario, clave, tenant, cliente, cfexml, referenciaERP, referenciaERP2,
                devolverQR, sizeQR, imprime, recurso, template, devolverXML, erpPideValidacion, version);
    }

    private static SICFERespuestaBuffer obtenerPDF(java.lang.String nomusuario, java.lang.String clave, org.datacontract.schemas._2004._07.sicfecontract.IdCFE pIdCFE, java.lang.String pTenant, java.lang.String template) {
        org.tempuri.ImpSICFEEmisor service = new org.tempuri.ImpSICFEEmisor();
        org.tempuri.ISICFEEmisor port = service.getBasicHttpBindingISICFEEmisor();
        //SICFERespuestaBuffer x = new SICFERespuestaBuffer();
        return port.obtenerPDF(nomusuario, clave, pIdCFE, pTenant, template);
        //x.getBuffer().getValue()
        //JOptionPane.showMessageDialog(null, x.getCodigo()); //error

        //return x;
    }

}
