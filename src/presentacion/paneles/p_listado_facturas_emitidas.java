/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion.paneles;

import dominio.d_cfe;
import dominio.d_clave;
import dominio.d_configuracion;
import dominio.d_gastos_inq;
import dominio.d_generarcfe;
import dominio.d_movimiento;
import dominio.d_parametro;
import dominio.d_parametroscfe;
import dominio.d_xml;
import interfaces.observador_documentos;
import interfaces.observador_mov;
import java.awt.Dialog;
import java.awt.Dimension;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.xml.bind.JAXBElement;
import javax.xml.namespace.QName;
import static jdk.nashorn.internal.objects.NativeString.toUpperCase;
import org.datacontract.schemas._2004._07.sicfecontract.SICFERespuestaBuffer;
import org.datacontract.schemas._2004._07.sicfecontract.SICFERespuestaObtenerCFE;
import java.io.File;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import static jdk.nashorn.internal.objects.NativeString.toUpperCase;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.datacontract.schemas._2004._07.sicfecontract.RespuestaObtenerCAE;
import org.datacontract.schemas._2004._07.sicfecontract.SICFERespuestaEnvioCFE;
import persistencia.p_conexion;
import presentacion.p_fichamantenimiento;

/**
 *
 * @author Gonzalo
 */
public class p_listado_facturas_emitidas extends javax.swing.JDialog implements observador_documentos {

    p_control con = p_control.getInstancia();
    DefaultTableModel mdltabla = new DefaultTableModel();
    List<d_cfe> lista_documentos = new ArrayList<>();

    /**
     * Creates new form p_listado_mov
     */
    public p_listado_facturas_emitidas(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        tbllistado.setModel(mdltabla);

        mdltabla.addColumn("ID");
        mdltabla.addColumn("SERIE");
        mdltabla.addColumn("NUMERO");
        mdltabla.addColumn("TIPO");
        //mdltabla.addColumn("TIENE RECIBO");
        cargar();
        cargarobservador();
    }

    void cargarobservador() {
        p_control con = p_control.getInstancia();
        con.registrarobservador_doc(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tbllistado = tbllistado = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };
        jButton4 = new javax.swing.JButton();
        txtclave = new javax.swing.JPasswordField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("LISTADO DOCUMENTOS EMITIDOS");
        getContentPane().setLayout(null);

        tbllistado.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        tbllistado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbllistadoMouseClicked(evt);
            }
        });
        tbllistado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbllistadoKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tbllistado);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 20, 550, 180);

        jButton4.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton4.setText("ELIMINAR");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(570, 100, 150, 30);
        getContentPane().add(txtclave);
        txtclave.setBounds(10, 240, 138, 30);

        jButton5.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton5.setText("OBTENER PDF");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(570, 20, 150, 30);

        jButton6.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton6.setText("INGRESAR AL DIARIO");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6);
        jButton6.setBounds(570, 140, 150, 30);

        jLabel17.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel17.setText("CLAVE");
        getContentPane().add(jLabel17);
        jLabel17.setBounds(10, 220, 70, 17);

        jButton7.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton7.setText("OBTENER RECIBO");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton7);
        jButton7.setBounds(570, 60, 150, 30);

        setBounds(0, 0, 749, 326);
    }// </editor-fold>//GEN-END:initComponents

    private void tbllistadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbllistadoMouseClicked
        try {
            //selecciontabla();
            if (evt.getClickCount() == 2) {
                //HIZO DOBLE CLIC
                String xml = obtenerCFEPorID_funcion_devuelvexml();

                mostrarmensajeinfo(devuelvemensajeparaimprimir(xml));
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tbllistadoMouseClicked

    private void tbllistadoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbllistadoKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tbllistadoKeyPressed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String nombre, rut, direccion, ciudad, departamento, pais, concepto, adenda;
        Float importe, iva;

        try {
            if (id_seleccionado() != null) {
                int ax = JOptionPane.showConfirmDialog(null,
                        "¿DESEA ELIMINAR EL DOCUMENTO (SE GENERARÁ UNA NOTA DE CRÉDITO)?", "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
                if (ax == JOptionPane.YES_OPTION) {
                    String xml = obtenerCFEPorID_funcion_devuelvexml();
                    d_xml dx = new d_xml();
                    nombre = dx.recibexmlfacturaydevuelvenombrecliente(xml);
                    rut = dx.recibexmlfacturaydevuelverutcliente(xml);
                    direccion = dx.recibexmlfacturaydevuelvedireccioncliente(xml);
                    ciudad = dx.recibexmlfacturaydevuelveciudadcliente(xml);
                    departamento = dx.recibexmlfacturaydevuelvedepartamentocliente(xml);
                    pais = dx.recibexmlfacturaydevuelvepaiscliente(xml);
                    concepto = dx.recibexmlfacturaydevuelveconcepto(xml);
                    adenda = "ID TRANSACC.:\n" + id_seleccionado();
                    importe = Float.parseFloat(dx.recibexmlfacturaydevuelvetotalsiniva(xml));
                    iva = devuelveiva(importe);
                    Date fecha = fechaactual();
                    generarnotacredito(id_seleccionado(), nombre, rut, direccion, ciudad, departamento, pais, concepto, importe, iva, adenda, fecha);
                    cargar();
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    Float devuelveiva(Float importe) throws Exception { //recibe comision
        d_parametro par = new d_parametro();
        Float iva = 0.0F;

        par = par.buscarparametro();

        iva = importe * par.getIva() / 100;

        return iva;
    }

    void generarnotacredito(Integer id_recibido, String nombre, String rut, String direccion, String ciudad, String departamento, String pais, String concepto, Float total_recibido, Float iva_recibido, String adenda, Date fecha_recibida) throws Exception {
        d_cfe cfe = new d_cfe();
        d_parametroscfe pcfe = new d_parametroscfe();
        SICFERespuestaEnvioCFE envio = new SICFERespuestaEnvioCFE();
        d_generarcfe gt = new d_generarcfe();
        int tipo_de_nota = 0;

        pcfe = pcfe.buscarparametroscfe();
        if (pcfe == null) {
            throw new Exception("debe ingresar parametros cfe: nombre, clave y tenant");
        }

        cfe = cfe.buscarcfe(id_recibido);

        if (cfe == null) {
            return;
        }

        //controlar que no tenga nota de credito ya ingresada (if cfe.tipo)
        gt = gt.ticketdefecto();
        //ver si es necesario cambiar alguna variable de ticket por defecto
        if (cfe.getTipo().equals(101)) {
            gt.setCfexml(gt.cfexmlnotacreditoeticket_emitida(nombre, rut, direccion, concepto, total_recibido, iva_recibido, adenda, fecha_recibida, cfe.getNumero()));
        }
        if (cfe.getTipo().equals(111)) {
            gt.setCfexml(gt.cfexmlnotacreditofactura_emitida(nombre, rut, direccion, ciudad, departamento, pais, concepto, total_recibido, iva_recibido, adenda, fecha_recibida, cfe.getNumero()));
        }
        if (!cfe.getTipo().equals(101) && !cfe.getTipo().equals(111)) {
            return;
        }

        //gt.setReferenciaERP("56555");
        gt.setNomusuario(pcfe.getNomusuario());
        gt.setClave(pcfe.getClave());
        gt.setTenant(pcfe.getTenant());

        if (cfe.getTipo() == 101) {
            tipo_de_nota = 102;
        }
        if (cfe.getTipo() == 111) {
            tipo_de_nota = 112;
        }

        //int id = (con.obtenerMayorNumDOCCFE(tipo_de_nota) + 1);
        int id = ((con.maximo_mov() + 1) * 100);
        gt.setReferenciaERP(String.valueOf(id));
        envio = envioCFE(gt.getNomusuario(), gt.getClave(),
                gt.getTenant(), gt.getCliente(), gt.getCfexml(), gt.getReferenciaERP(),
                gt.getReferenciaERP2(), gt.getDevolverQR(), gt.getSizeQR(),
                gt.getImprime(), gt.getRecurso(), gt.getTemplate(), gt.getDevolverXML(),
                gt.getErpPideValidacion(), gt.getVersion());
        //i = envio.getCodigo();
        if (envio.getCodigo() != 0) {
            if (envio.getCodigo() == 100009) {
                while (envio.getCodigo() == 100009) {
                    id = id + 1;
                    gt.setReferenciaERP(String.valueOf(id));
                    envio = envioCFE(gt.getNomusuario(), gt.getClave(),
                            gt.getTenant(), gt.getCliente(), gt.getCfexml(), gt.getReferenciaERP(),
                            gt.getReferenciaERP2(), gt.getDevolverQR(), gt.getSizeQR(),
                            gt.getImprime(), gt.getRecurso(), gt.getTemplate(), gt.getDevolverXML(),
                            gt.getErpPideValidacion(), gt.getVersion());
                    if (envio.getCodigo() == 0) {
                        //id = (con.minimo_entre_cfe_y_mov() - 1); //CHEQUEAR ESTO PORQUE EL MINIMO EN TABLA CFE PUEDE EXISTIR EN MOVIMIENTOS Y VICEVERSA

                        guardarcfe(nombre, cfe.getIdmov(), "A", envio.getIdCFE().getValue().getNumero(),
                                envio.getIdCFE().getValue().getRucemisor().getValue(),
                                envio.getIdCFE().getValue().getTipo(), envio.getIdCFE().getValue().getObservado());
                        //int numserie=envio.getIdCFE().getValue().getNumero();
                        //throw new Exception(envio.getDescripcion().getValue());
                        //JOptionPane.showMessageDialog(null,numserie); 
                        break;
                    }
                }
            } else {
                throw new Exception(envio.getDescripcion().getValue());
            }
        } else {
            Integer tipo = envio.getIdCFE().getValue().getTipo();
            if (tipo == 112 || tipo == 102) {
                //SI EL TIPO ES NOTA DE CREDITO, ACTUALIZAMOS EL IDMOV QUE YA TENIA, PARA QUE CORRESPONDA A LA NOTA DE CREDITO
                id = cfe.getIdmov();
            }

            guardarcfe(nombre, id, "A", envio.getIdCFE().getValue().getNumero(),
                    envio.getIdCFE().getValue().getRucemisor().getValue(),
                    envio.getIdCFE().getValue().getTipo(), envio.getIdCFE().getValue().getObservado());
            //int numserie=envio.getIdCFE().getValue().getNumero();
            //throw new Exception(envio.getDescripcion().getValue());
            //JOptionPane.showMessageDialog(null,numserie);  
        }
        //throw new Exception(envio.getDescripcion().getValue());

        JOptionPane.showMessageDialog(this, "SE ELIMINÓ LA FACTURA CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
    }

    void guardarcfe(String nombre_cliente, Integer idmov, String serie, Integer numero, String rucemisor, Integer tipo, Integer observado) throws Exception {
        d_cfe cfe = new d_cfe();

        cfe.setIdmov(idmov);
        cfe.setSerie(serie);
        cfe.setNumero(numero);
        cfe.setRucemisor(rucemisor);
        cfe.setTipo(tipo);
        cfe.setObservado(observado);

        cfe.guardarcfe(cfe);
        con.escribirfichero("se emite nota de credito factura dgi, a nombre de " + nombre_cliente + " movimiento: " + idmov + " -- serie: " + serie + " -- numero: " + numero + " -- ruc emisor: " + rucemisor + " -- tipo: " + tipo + " -- observado: " + observado);
    }

    Date fechaactual() throws Exception {
        SimpleDateFormat formateador = new SimpleDateFormat("dd/MM/yyyy", new Locale("es_ES"));
        String fechastr = (formateador.format(new Date()));

        return parsefechadate_devuelvedate(fechastr);
    }

    Date parsefechadate_devuelvedate(String fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        Date fechaDate = null;

        try {
            fechaDate = formato.parse(fecha);
        } catch (ParseException ex) {
            throw new Exception("revise formato de año");
        }
        return fechaDate;
    }

    private static SICFERespuestaEnvioCFE envioCFE(java.lang.String nomusuario, java.lang.String clave,
            java.lang.String tenant, java.lang.String cliente, java.lang.String cfexml, java.lang.String referenciaERP,
            java.lang.String referenciaERP2, java.lang.Boolean devolverQR, java.lang.Integer sizeQR,
            java.lang.Integer imprime, java.lang.String recurso, java.lang.String template, java.lang.Boolean devolverXML,
            java.lang.Boolean erpPideValidacion, java.lang.String version) {
        org.tempuri.ImpSICFEEmisor service = new org.tempuri.ImpSICFEEmisor();
        org.tempuri.ISICFEEmisor port = service.getBasicHttpBindingISICFEEmisor();
        return port.envioCFE(nomusuario, clave, tenant, cliente, cfexml, referenciaERP, referenciaERP2,
                devolverQR, sizeQR, imprime, recurso, template, devolverXML, erpPideValidacion, version);
    }

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        /*
        SICFERespuestaVersion obtenerVersion = new SICFERespuestaVersion();
        obtenerVersion = obtenerVersion();
        JOptionPane.showMessageDialog(null, obtenerVersion.getVersionBD());
         */
        try {
            if (id_seleccionado() == null) {
                return;
            }
            d_cfe cfe = new d_cfe();
            controlarclave();
            d_parametroscfe pcfe = new d_parametroscfe();
            //buscar movimiento y parametroscfe que trae usuario, clave, tenant
            SICFERespuestaBuffer obtenerVersion = new SICFERespuestaBuffer();
            QName fooQNameSerie = new QName("http://schemas.datacontract.org/2004/07/SICFEContract", "Serie");
            QName fooQNameRucemisor = new QName("http://schemas.datacontract.org/2004/07/SICFEContract", "rucemisor");
            org.datacontract.schemas._2004._07.sicfecontract.IdCFE i = new org.datacontract.schemas._2004._07.sicfecontract.IdCFE();

            pcfe = pcfe.buscarparametroscfe();
            if (pcfe == null) {
                throw new Exception("debe ingresar parametros cfe: nombre, clave y tenant");
            }
            cfe = cfe.buscarcfe(id_seleccionado());
            if (cfe == null) {
                throw new Exception("no existe pdf solicitado");
            }

            JAXBElement<String> serie = new JAXBElement<String>(fooQNameSerie, String.class, cfe.getSerie());
            JAXBElement<String> rucemisor = new JAXBElement<String>(fooQNameRucemisor, String.class, cfe.getRucemisor());
            /*
            JAXBElement<String> rucemisor = new JAXBElement<>(new QName(org.datacontract.schemas._2004._07.sicfecontract.IdCFE.class.getSimpleName()),
                String.class, "rucemisor");
            rucemisor.setValue("120196190011");
             */
            i.setRucemisor(rucemisor);
            i.setSerie(serie);
            i.setTipo(cfe.getTipo());
            i.setNumero(cfe.getNumero());
            i.setObservado(cfe.getObservado());
            obtenerVersion = obtenerPDF(pcfe.getNomusuario(), pcfe.getClave(), i, pcfe.getTenant(), "");
            if (obtenerVersion.getCodigo() != 0) {
                throw new Exception("CFE solicitado no existe, o no fue ingresado");
            }
            pdf(obtenerVersion, id_seleccionado());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        p_agregar_recibo agr = null;

        try {
            if (tiene_recibo(id_seleccionado()).equals("Si")) {
                JOptionPane.showMessageDialog(null, toUpperCase("DOCUMENTO YA ESTA INGRESADO AL DIARIO"), "ATENCION", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            con.id_documento = id_seleccionado();
            agr = new p_agregar_recibo(null, true);
            agr.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            if (tiene_recibo(id_seleccionado()).equals("No") || tiene_recibo(id_seleccionado()) == null) {
                throw new Exception("DOCUMENTO NO FIGURA EN MOVIMIENTOS DIARIOS");
            }
            d_xml dx = new d_xml();
            String nombre, ci, direccion, concepto, importe;
            String xml = obtenerCFEPorID_funcion_devuelvexml();
            nombre = dx.recibexmlfacturaydevuelvenombrecliente(xml);
            ci = dx.recibexmlfacturaydevuelverutcliente(xml);
            direccion = dx.recibexmlfacturaydevuelvedireccioncliente(xml);
            concepto = dx.recibexmlfacturaydevuelveconcepto(xml);
            importe = con.mostrarnumero(Float.parseFloat(dx.recibexmlfacturaydevuelvetotalsiniva(xml)));
            generarrrecibo(id_seleccionado(), nombre, ci, direccion, concepto, importe);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    Integer id_seleccionado() throws Exception {
        if (tbllistado.getSelectedRow() < 0) {
            throw new Exception("DEBE SELECCIONAR UNA FILA");
        }
        int row = tbllistado.getSelectedRow();
        return (int) tbllistado.getValueAt(row, 0);
    }

    private static SICFERespuestaBuffer obtenerPDF(java.lang.String nomusuario, java.lang.String clave, org.datacontract.schemas._2004._07.sicfecontract.IdCFE pIdCFE, java.lang.String pTenant, java.lang.String template) {
        org.tempuri.ImpSICFEEmisor service = new org.tempuri.ImpSICFEEmisor();
        org.tempuri.ISICFEEmisor port = service.getBasicHttpBindingISICFEEmisor();
        //SICFERespuestaBuffer x = new SICFERespuestaBuffer();
        return port.obtenerPDF(nomusuario, clave, pIdCFE, pTenant, template);
        //x.getBuffer().getValue()
        //JOptionPane.showMessageDialog(null, x.getCodigo()); //error

        //return x;
    }

    void pdf(SICFERespuestaBuffer obtenerVersion, int id) throws FileNotFoundException, IOException {
        QName fooQNameSerie = new QName("http://schemas.datacontract.org/2004/07/SICFEContract", "Buffer");
        JAXBElement<byte[]> buffer = new JAXBElement<byte[]>(fooQNameSerie, byte[].class, new byte[obtenerVersion.getBuffer().getValue().length]);
        buffer = obtenerVersion.getBuffer();

        byte[] bytes = new byte[buffer.getValue().length];
        bytes = buffer.getValue();

        //below is the different part
        String nombrearch = "cfe-" + id + ".pdf";
        File someFile = new File(nombrearch);
        someFile.createNewFile();
        FileOutputStream fos = new FileOutputStream(someFile);
        fos.write(bytes);
        fos.flush();
        fos.close();
        Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + nombrearch);
    }

    void controlarclave() throws Exception {
        d_clave cla = new d_clave();
        d_configuracion conf = new d_configuracion();

        conf = conf.buscarconfiguracion();

        if (conf.getClave().equals("NO")) {
            return;
        }
        cla = cla.buscarclave();

        if (!txtclave.getText().equals(cla.getClave())) {
            throw new Exception("clave incorrecta");
        }
    }

    void cargar() {
        d_cfe cfe = new d_cfe();
        d_cfe cfe1 = null;
        Vector v;

        try {
            cleartable();
            lista_documentos = cfe.listarcfe_todos();
            for (d_cfe aux : lista_documentos) {
                cfe1 = new d_cfe();
                v = new Vector();
                cfe1.setIdmov(aux.getIdmov());
                cfe1.setSerie(aux.getSerie());
                cfe1.setNumero(aux.getNumero());
                cfe1.setTipo(aux.getTipo());
                v.add(cfe1.getIdmov());
                v.add(cfe1.getSerie());
                v.add(cfe1.getNumero());
                v.add(devuelve_tipo_doc(cfe1.getTipo()));
                //v.add(tiene_recibo(cfe1.getIdmov()));
                mdltabla.addRow(v);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    String devuelve_tipo_doc(Integer tipo) {
        if (tipo == 111) {
            return "E-FACTURA";
        }
        if (tipo == 101) {
            return "E-TICKET";
        }
        return String.valueOf(tipo);
    }

    String parsefechastring(java.util.Date fecha) {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        String fechastr = formato.format(fecha);

        return fechastr;
    }

    Date parsefechadate(Date fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        Date fechaDate = null;

        try {
            String nuevafecha = formato.format(fecha);
            fechaDate = formato.parse(nuevafecha);
        } catch (Exception ex) {
            throw new Exception(ex.getMessage());
        }
        return fechaDate;
    }

    void cleartable() {
        for (int i = 0; i < tbllistado.getRowCount(); i++) {
            mdltabla.removeRow(i);
            i -= 1;
        }
        lista_documentos = null;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(p_listado_facturas_emitidas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(p_listado_facturas_emitidas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(p_listado_facturas_emitidas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(p_listado_facturas_emitidas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                p_listado_facturas_emitidas dialog = new p_listado_facturas_emitidas(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbllistado;
    private javax.swing.JPasswordField txtclave;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actualizar() {
        cargar();
    }

    String obtenerCFEPorID_funcion_devuelvexml() throws Exception {
        if (id_seleccionado() == null) {
            return "";
        }
        d_cfe cfe = new d_cfe();
        controlarclave();
        d_parametroscfe pcfe = new d_parametroscfe();
        //buscar movimiento y parametroscfe que trae usuario, clave, tenant
        SICFERespuestaObtenerCFE obtenerVersion = new SICFERespuestaObtenerCFE();
        QName fooQNameSerie = new QName("http://schemas.datacontract.org/2004/07/SICFEContract", "Serie");
        QName fooQNameRucemisor = new QName("http://schemas.datacontract.org/2004/07/SICFEContract", "rucemisor");
        org.datacontract.schemas._2004._07.sicfecontract.IdCFE i = new org.datacontract.schemas._2004._07.sicfecontract.IdCFE();

        pcfe = pcfe.buscarparametroscfe();
        if (pcfe == null) {
            throw new Exception("debe ingresar parametros cfe: nombre, clave y tenant");
        }
        cfe = cfe.buscarcfe(id_seleccionado());
        if (cfe == null) {
            throw new Exception("no existe pdf solicitado");
        }

        JAXBElement<String> serie = new JAXBElement<String>(fooQNameSerie, String.class, cfe.getSerie());
        JAXBElement<String> rucemisor = new JAXBElement<String>(fooQNameRucemisor, String.class, cfe.getRucemisor());
        /*
            JAXBElement<String> rucemisor = new JAXBElement<>(new QName(org.datacontract.schemas._2004._07.sicfecontract.IdCFE.class.getSimpleName()),
                String.class, "rucemisor");
            rucemisor.setValue("120196190011");
         */
        i.setRucemisor(rucemisor);
        i.setSerie(serie);
        i.setTipo(cfe.getTipo());
        i.setNumero(cfe.getNumero());
        i.setObservado(cfe.getObservado());
        obtenerVersion = obtenerCFEPorID(pcfe.getNomusuario(), pcfe.getClave(), pcfe.getTenant(), i.getTipo(), cfe.getSerie(), i.getNumero(), true);
        if (obtenerVersion.getCodigo() != 0) {
            throw new Exception("CFE solicitado no existe, o no fue ingresado");
        }
        return obtenerVersion.getXml().getValue();
    }

    String devuelvemensajeparaimprimir(String xml) throws Exception {
        d_xml dx = new d_xml();
        String fecha_emision = "";
        String tipo_doc_cliente = null;

        if (tipo_doc().equals("E-TICKET")) {
            tipo_doc_cliente = "CI";
            fecha_emision = dx.recibexmlfacturaydevuelvefechaemisionticket(xml);
        }
        if (tipo_doc().equals("E-FACTURA")) {
            tipo_doc_cliente = "RUT";
            fecha_emision = dx.recibexmlfacturaydevuelvefechaemisionfactura(xml);
        }

        Date fecha_d = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").parse(fecha_emision);
        String mensaje = "NOMBRE: " + dx.recibexmlfacturaydevuelvenombrecliente(xml) + "\n"
                + "FECHA CREACION DEL DOCUMENTO: " + parsefechaemitida(fecha_d) + "\n"
                + "" + tipo_doc_cliente + ": " + dx.recibexmlfacturaydevuelverutcliente(xml) + "\n"
                + "DIRECCION: " + dx.recibexmlfacturaydevuelvedireccioncliente(xml) + "\n"
                + "CONCEPTO: " + dx.recibexmlfacturaydevuelveconcepto(xml) + "\n"
                //+ "INFO RECIBO: " + tiene_recibo() + "\n"
                //+ "ADENDA: " + dx.recibexmlfacturaydevuelveadenda(xml) + "\n"
                + "IMPORTE: " + con.mostrarnumero(Float.parseFloat(dx.recibexmlfacturaydevuelvetotalsiniva(xml))) + "\n"
                + "IVA: " + con.mostrarnumero(Float.parseFloat(dx.recibexmlfacturaydevuelveiva(xml))) + "\n"
                + "--------------------------------------------------------------------" + "\n"
                + "TOTAL ($U): " + con.mostrarnumero(Float.parseFloat(dx.recibexmlfacturaydevuelvetotalsiniva(xml))
                        + (Float.parseFloat(dx.recibexmlfacturaydevuelveiva(xml))));
        return (mensaje);
    }

    String tiene_recibo(int id) throws Exception {
        d_movimiento mov = new d_movimiento();
        Boolean tiene_recibo;
        //Integer id_mov;

        //int row = tbllistado.getSelectedRow();
        //id_mov = (Integer) tbllistado.getValueAt(row, 0);
        tiene_recibo = mov.tiene_recibo(id);
        if (tiene_recibo) {
            return "Si";
        }
        return "No";
    }

    String tipo_doc() {
        int row = tbllistado.getSelectedRow();
        if (row == -1) {
            return "";

        } else {
            String tipo = String.valueOf(tbllistado.getValueAt(row, 3));
            if (tipo.equals("E-TICKET")) {
                return "E-TICKET";
            }
            if (tipo.equals("E-FACTURA")) {
                return "E-FACTURA";
            }
        }
        return "";
    }

    String parsefechaemitida(java.util.Date fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        String nuevafecha = "";
        //Date fechaDate = null;

        try {
            nuevafecha = formato.format(fecha);
            //fechaDate = formato.parse(nuevafecha);
        } catch (Exception ex) {
            throw new Exception(ex.getMessage());
        }
        return nuevafecha;
    }

    void mostrarmensajeinfo(String texto) throws Exception {
        if (texto.equals("")) {
            return;
        }
        JTextArea textArea = new JTextArea(texto); //AQUI VA TEXTO
        JScrollPane scrollPane = new JScrollPane(textArea);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        textArea.setEditable(false);
        scrollPane.setPreferredSize(new Dimension(400, 250));
        JOptionPane.showMessageDialog(null, scrollPane, "INFORMACION DE LA FACTURA ELECTRONICA SELECCIONADA",
                JOptionPane.INFORMATION_MESSAGE);
    }

    private static SICFERespuestaObtenerCFE obtenerCFEPorID(java.lang.String usuario, java.lang.String clave, java.lang.String tenant, Integer tipo, java.lang.String serie, Integer numero, java.lang.Boolean devolverXML) {
        org.tempuri.ImpSICFEEmisor service = new org.tempuri.ImpSICFEEmisor();
        org.tempuri.ISICFEEmisor port = service.getBasicHttpBindingISICFEEmisor();
        return port.obtenerCFEPorID(usuario, clave, tenant, tipo.shortValue(), serie, numero.longValue(), true, devolverXML);
    }

    void generarrrecibo(int id, String nombre, String ci, String direccion, String concepto, String importe) throws Exception {
        java.sql.Connection c;
        p_conexion conex = p_conexion.getInstancia();
        c = conex.crearconexion();

        String template = "recibo-eticket.jasper";
        JasperReport reporte = null;
        reporte = (JasperReport) JRLoader.loadObject(template);

        Map param = new HashMap();

        param.put("fecha", parsefechadate(new Date()));
        param.put("nombre", nombre);
        param.put("ci", ci);
        param.put("direccion", direccion);
        param.put("texto", concepto);
        //param.put("adenda", txtadenda.getText() + " - ID TRANSACC.: " + id);
        param.put("movimiento", "entrada");
        param.put("pesos", "$ " + (importe));
        JasperPrint jasperprint = JasperFillManager.fillReport(reporte, param, c);
        JasperViewer visor = new JasperViewer(jasperprint, false);
        visor.setModalExclusionType(Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        visor.setTitle("Recibo");
        visor.setVisible(true);
        //this.dispose();
    }
}
